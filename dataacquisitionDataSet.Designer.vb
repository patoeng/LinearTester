'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.1
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dataacquisitionDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dataacquisitionDataSet
    Inherits Global.System.Data.DataSet
    
    Private tableequipments As equipmentsDataTable
    
    Private tablehazardevents As hazardeventsDataTable
    
    Private tablemanufacturingorders As manufacturingordersDataTable
    
    Private tablemeasurementresults As measurementresultsDataTable
    
    Private tableproductdefectcodes As productdefectcodesDataTable
    
    Private tableworkorders As workordersDataTable
    
    Private relationFK_HazardEquipment As Global.System.Data.DataRelation
    
    Private relationFK_workOrderEquipment As Global.System.Data.DataRelation
    
    Private relationFK_workOrderManufacturingOrder As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("equipments")) Is Nothing) Then
                MyBase.Tables.Add(New equipmentsDataTable(ds.Tables("equipments")))
            End If
            If (Not (ds.Tables("hazardevents")) Is Nothing) Then
                MyBase.Tables.Add(New hazardeventsDataTable(ds.Tables("hazardevents")))
            End If
            If (Not (ds.Tables("manufacturingorders")) Is Nothing) Then
                MyBase.Tables.Add(New manufacturingordersDataTable(ds.Tables("manufacturingorders")))
            End If
            If (Not (ds.Tables("measurementresults")) Is Nothing) Then
                MyBase.Tables.Add(New measurementresultsDataTable(ds.Tables("measurementresults")))
            End If
            If (Not (ds.Tables("productdefectcodes")) Is Nothing) Then
                MyBase.Tables.Add(New productdefectcodesDataTable(ds.Tables("productdefectcodes")))
            End If
            If (Not (ds.Tables("workorders")) Is Nothing) Then
                MyBase.Tables.Add(New workordersDataTable(ds.Tables("workorders")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property equipments() As equipmentsDataTable
        Get
            Return Me.tableequipments
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property hazardevents() As hazardeventsDataTable
        Get
            Return Me.tablehazardevents
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property manufacturingorders() As manufacturingordersDataTable
        Get
            Return Me.tablemanufacturingorders
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property measurementresults() As measurementresultsDataTable
        Get
            Return Me.tablemeasurementresults
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property productdefectcodes() As productdefectcodesDataTable
        Get
            Return Me.tableproductdefectcodes
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property workorders() As workordersDataTable
        Get
            Return Me.tableworkorders
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dataacquisitionDataSet = CType(MyBase.Clone,dataacquisitionDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("equipments")) Is Nothing) Then
                MyBase.Tables.Add(New equipmentsDataTable(ds.Tables("equipments")))
            End If
            If (Not (ds.Tables("hazardevents")) Is Nothing) Then
                MyBase.Tables.Add(New hazardeventsDataTable(ds.Tables("hazardevents")))
            End If
            If (Not (ds.Tables("manufacturingorders")) Is Nothing) Then
                MyBase.Tables.Add(New manufacturingordersDataTable(ds.Tables("manufacturingorders")))
            End If
            If (Not (ds.Tables("measurementresults")) Is Nothing) Then
                MyBase.Tables.Add(New measurementresultsDataTable(ds.Tables("measurementresults")))
            End If
            If (Not (ds.Tables("productdefectcodes")) Is Nothing) Then
                MyBase.Tables.Add(New productdefectcodesDataTable(ds.Tables("productdefectcodes")))
            End If
            If (Not (ds.Tables("workorders")) Is Nothing) Then
                MyBase.Tables.Add(New workordersDataTable(ds.Tables("workorders")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableequipments = CType(MyBase.Tables("equipments"),equipmentsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableequipments) Is Nothing) Then
                Me.tableequipments.InitVars
            End If
        End If
        Me.tablehazardevents = CType(MyBase.Tables("hazardevents"),hazardeventsDataTable)
        If (initTable = true) Then
            If (Not (Me.tablehazardevents) Is Nothing) Then
                Me.tablehazardevents.InitVars
            End If
        End If
        Me.tablemanufacturingorders = CType(MyBase.Tables("manufacturingorders"),manufacturingordersDataTable)
        If (initTable = true) Then
            If (Not (Me.tablemanufacturingorders) Is Nothing) Then
                Me.tablemanufacturingorders.InitVars
            End If
        End If
        Me.tablemeasurementresults = CType(MyBase.Tables("measurementresults"),measurementresultsDataTable)
        If (initTable = true) Then
            If (Not (Me.tablemeasurementresults) Is Nothing) Then
                Me.tablemeasurementresults.InitVars
            End If
        End If
        Me.tableproductdefectcodes = CType(MyBase.Tables("productdefectcodes"),productdefectcodesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableproductdefectcodes) Is Nothing) Then
                Me.tableproductdefectcodes.InitVars
            End If
        End If
        Me.tableworkorders = CType(MyBase.Tables("workorders"),workordersDataTable)
        If (initTable = true) Then
            If (Not (Me.tableworkorders) Is Nothing) Then
                Me.tableworkorders.InitVars
            End If
        End If
        Me.relationFK_HazardEquipment = Me.Relations("FK_HazardEquipment")
        Me.relationFK_workOrderEquipment = Me.Relations("FK_workOrderEquipment")
        Me.relationFK_workOrderManufacturingOrder = Me.Relations("FK_workOrderManufacturingOrder")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "dataacquisitionDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dataacquisitionDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableequipments = New equipmentsDataTable()
        MyBase.Tables.Add(Me.tableequipments)
        Me.tablehazardevents = New hazardeventsDataTable()
        MyBase.Tables.Add(Me.tablehazardevents)
        Me.tablemanufacturingorders = New manufacturingordersDataTable()
        MyBase.Tables.Add(Me.tablemanufacturingorders)
        Me.tablemeasurementresults = New measurementresultsDataTable()
        MyBase.Tables.Add(Me.tablemeasurementresults)
        Me.tableproductdefectcodes = New productdefectcodesDataTable()
        MyBase.Tables.Add(Me.tableproductdefectcodes)
        Me.tableworkorders = New workordersDataTable()
        MyBase.Tables.Add(Me.tableworkorders)
        Me.relationFK_HazardEquipment = New Global.System.Data.DataRelation("FK_HazardEquipment", New Global.System.Data.DataColumn() {Me.tableequipments.equipmentIdColumn}, New Global.System.Data.DataColumn() {Me.tablehazardevents.HazardEventEquipmentColumn}, false)
        Me.Relations.Add(Me.relationFK_HazardEquipment)
        Me.relationFK_workOrderEquipment = New Global.System.Data.DataRelation("FK_workOrderEquipment", New Global.System.Data.DataColumn() {Me.tableequipments.equipmentIdColumn}, New Global.System.Data.DataColumn() {Me.tableworkorders.workOrderEquipmentColumn}, false)
        Me.Relations.Add(Me.relationFK_workOrderEquipment)
        Me.relationFK_workOrderManufacturingOrder = New Global.System.Data.DataRelation("FK_workOrderManufacturingOrder", New Global.System.Data.DataColumn() {Me.tablemanufacturingorders.manufacturingOrderIdColumn}, New Global.System.Data.DataColumn() {Me.tableworkorders.workOrderManufacturingOrderColumn}, false)
        Me.Relations.Add(Me.relationFK_workOrderManufacturingOrder)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeequipments() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializehazardevents() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializemanufacturingorders() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializemeasurementresults() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeproductdefectcodes() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeworkorders() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dataacquisitionDataSet = New dataacquisitionDataSet()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub equipmentsRowChangeEventHandler(ByVal sender As Object, ByVal e As equipmentsRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub hazardeventsRowChangeEventHandler(ByVal sender As Object, ByVal e As hazardeventsRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub manufacturingordersRowChangeEventHandler(ByVal sender As Object, ByVal e As manufacturingordersRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub measurementresultsRowChangeEventHandler(ByVal sender As Object, ByVal e As measurementresultsRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub productdefectcodesRowChangeEventHandler(ByVal sender As Object, ByVal e As productdefectcodesRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub workordersRowChangeEventHandler(ByVal sender As Object, ByVal e As workordersRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class equipmentsDataTable
        Inherits Global.System.Data.TypedTableBase(Of equipmentsRow)
        
        Private columnequipmentId As Global.System.Data.DataColumn
        
        Private columnequipmentLabel As Global.System.Data.DataColumn
        
        Private columnequipmentProductionLine As Global.System.Data.DataColumn
        
        Private columnequipmentDescription As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "equipments"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property equipmentIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnequipmentId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property equipmentLabelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnequipmentLabel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property equipmentProductionLineColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnequipmentProductionLine
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property equipmentDescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnequipmentDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As equipmentsRow
            Get
                Return CType(Me.Rows(index),equipmentsRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event equipmentsRowChanging As equipmentsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event equipmentsRowChanged As equipmentsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event equipmentsRowDeleting As equipmentsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event equipmentsRowDeleted As equipmentsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddequipmentsRow(ByVal row As equipmentsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddequipmentsRow(ByVal equipmentId As UInteger, ByVal equipmentLabel As String, ByVal equipmentProductionLine As String, ByVal equipmentDescription As String) As equipmentsRow
            Dim rowequipmentsRow As equipmentsRow = CType(Me.NewRow,equipmentsRow)
            Dim columnValuesArray() As Object = New Object() {equipmentId, equipmentLabel, equipmentProductionLine, equipmentDescription}
            rowequipmentsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowequipmentsRow)
            Return rowequipmentsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByequipmentId(ByVal equipmentId As UInteger) As equipmentsRow
            Return CType(Me.Rows.Find(New Object() {equipmentId}),equipmentsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As equipmentsDataTable = CType(MyBase.Clone,equipmentsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New equipmentsDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnequipmentId = MyBase.Columns("equipmentId")
            Me.columnequipmentLabel = MyBase.Columns("equipmentLabel")
            Me.columnequipmentProductionLine = MyBase.Columns("equipmentProductionLine")
            Me.columnequipmentDescription = MyBase.Columns("equipmentDescription")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnequipmentId = New Global.System.Data.DataColumn("equipmentId", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnequipmentId)
            Me.columnequipmentLabel = New Global.System.Data.DataColumn("equipmentLabel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnequipmentLabel)
            Me.columnequipmentProductionLine = New Global.System.Data.DataColumn("equipmentProductionLine", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnequipmentProductionLine)
            Me.columnequipmentDescription = New Global.System.Data.DataColumn("equipmentDescription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnequipmentDescription)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnequipmentId}, true))
            Me.columnequipmentId.AllowDBNull = false
            Me.columnequipmentId.Unique = true
            Me.columnequipmentLabel.AllowDBNull = false
            Me.columnequipmentLabel.MaxLength = 45
            Me.columnequipmentProductionLine.MaxLength = 45
            Me.columnequipmentDescription.MaxLength = 45
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewequipmentsRow() As equipmentsRow
            Return CType(Me.NewRow,equipmentsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New equipmentsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(equipmentsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.equipmentsRowChangedEvent) Is Nothing) Then
                RaiseEvent equipmentsRowChanged(Me, New equipmentsRowChangeEvent(CType(e.Row,equipmentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.equipmentsRowChangingEvent) Is Nothing) Then
                RaiseEvent equipmentsRowChanging(Me, New equipmentsRowChangeEvent(CType(e.Row,equipmentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.equipmentsRowDeletedEvent) Is Nothing) Then
                RaiseEvent equipmentsRowDeleted(Me, New equipmentsRowChangeEvent(CType(e.Row,equipmentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.equipmentsRowDeletingEvent) Is Nothing) Then
                RaiseEvent equipmentsRowDeleting(Me, New equipmentsRowChangeEvent(CType(e.Row,equipmentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveequipmentsRow(ByVal row As equipmentsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dataacquisitionDataSet = New dataacquisitionDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "equipmentsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class hazardeventsDataTable
        Inherits Global.System.Data.TypedTableBase(Of hazardeventsRow)
        
        Private columnHazardEventId As Global.System.Data.DataColumn
        
        Private columnHazardEventLabel As Global.System.Data.DataColumn
        
        Private columnHazardEventGravity As Global.System.Data.DataColumn
        
        Private columnHazardEventEquipment As Global.System.Data.DataColumn
        
        Private columnHazardEventWorkOrder As Global.System.Data.DataColumn
        
        Private columnHazardEventBeginDate As Global.System.Data.DataColumn
        
        Private columnHazardEventEndDate As Global.System.Data.DataColumn
        
        Private columnHazardEventDuration As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "hazardevents"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property HazardEventIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHazardEventId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property HazardEventLabelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHazardEventLabel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property HazardEventGravityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHazardEventGravity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property HazardEventEquipmentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHazardEventEquipment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property HazardEventWorkOrderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHazardEventWorkOrder
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property HazardEventBeginDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHazardEventBeginDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property HazardEventEndDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHazardEventEndDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property HazardEventDurationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHazardEventDuration
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As hazardeventsRow
            Get
                Return CType(Me.Rows(index),hazardeventsRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event hazardeventsRowChanging As hazardeventsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event hazardeventsRowChanged As hazardeventsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event hazardeventsRowDeleting As hazardeventsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event hazardeventsRowDeleted As hazardeventsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddhazardeventsRow(ByVal row As hazardeventsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddhazardeventsRow(ByVal HazardEventId As String, ByVal HazardEventLabel As String, ByVal HazardEventGravity As String, ByVal parentequipmentsRowByFK_HazardEquipment As equipmentsRow, ByVal HazardEventWorkOrder As String, ByVal HazardEventBeginDate As Date, ByVal HazardEventEndDate As Date, ByVal HazardEventDuration As UInteger) As hazardeventsRow
            Dim rowhazardeventsRow As hazardeventsRow = CType(Me.NewRow,hazardeventsRow)
            Dim columnValuesArray() As Object = New Object() {HazardEventId, HazardEventLabel, HazardEventGravity, Nothing, HazardEventWorkOrder, HazardEventBeginDate, HazardEventEndDate, HazardEventDuration}
            If (Not (parentequipmentsRowByFK_HazardEquipment) Is Nothing) Then
                columnValuesArray(3) = parentequipmentsRowByFK_HazardEquipment(0)
            End If
            rowhazardeventsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowhazardeventsRow)
            Return rowhazardeventsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByHazardEventId(ByVal HazardEventId As String) As hazardeventsRow
            Return CType(Me.Rows.Find(New Object() {HazardEventId}),hazardeventsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As hazardeventsDataTable = CType(MyBase.Clone,hazardeventsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New hazardeventsDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnHazardEventId = MyBase.Columns("HazardEventId")
            Me.columnHazardEventLabel = MyBase.Columns("HazardEventLabel")
            Me.columnHazardEventGravity = MyBase.Columns("HazardEventGravity")
            Me.columnHazardEventEquipment = MyBase.Columns("HazardEventEquipment")
            Me.columnHazardEventWorkOrder = MyBase.Columns("HazardEventWorkOrder")
            Me.columnHazardEventBeginDate = MyBase.Columns("HazardEventBeginDate")
            Me.columnHazardEventEndDate = MyBase.Columns("HazardEventEndDate")
            Me.columnHazardEventDuration = MyBase.Columns("HazardEventDuration")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnHazardEventId = New Global.System.Data.DataColumn("HazardEventId", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHazardEventId)
            Me.columnHazardEventLabel = New Global.System.Data.DataColumn("HazardEventLabel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHazardEventLabel)
            Me.columnHazardEventGravity = New Global.System.Data.DataColumn("HazardEventGravity", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHazardEventGravity)
            Me.columnHazardEventEquipment = New Global.System.Data.DataColumn("HazardEventEquipment", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHazardEventEquipment)
            Me.columnHazardEventWorkOrder = New Global.System.Data.DataColumn("HazardEventWorkOrder", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHazardEventWorkOrder)
            Me.columnHazardEventBeginDate = New Global.System.Data.DataColumn("HazardEventBeginDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHazardEventBeginDate)
            Me.columnHazardEventEndDate = New Global.System.Data.DataColumn("HazardEventEndDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHazardEventEndDate)
            Me.columnHazardEventDuration = New Global.System.Data.DataColumn("HazardEventDuration", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHazardEventDuration)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnHazardEventId}, true))
            Me.columnHazardEventId.AllowDBNull = false
            Me.columnHazardEventId.Unique = true
            Me.columnHazardEventId.MaxLength = 40
            Me.columnHazardEventLabel.AllowDBNull = false
            Me.columnHazardEventLabel.MaxLength = 150
            Me.columnHazardEventGravity.AllowDBNull = false
            Me.columnHazardEventGravity.MaxLength = 45
            Me.columnHazardEventEquipment.AllowDBNull = false
            Me.columnHazardEventWorkOrder.AllowDBNull = false
            Me.columnHazardEventWorkOrder.MaxLength = 40
            Me.columnHazardEventBeginDate.AllowDBNull = false
            Me.columnHazardEventEndDate.AllowDBNull = false
            Me.columnHazardEventDuration.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewhazardeventsRow() As hazardeventsRow
            Return CType(Me.NewRow,hazardeventsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New hazardeventsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(hazardeventsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.hazardeventsRowChangedEvent) Is Nothing) Then
                RaiseEvent hazardeventsRowChanged(Me, New hazardeventsRowChangeEvent(CType(e.Row,hazardeventsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.hazardeventsRowChangingEvent) Is Nothing) Then
                RaiseEvent hazardeventsRowChanging(Me, New hazardeventsRowChangeEvent(CType(e.Row,hazardeventsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.hazardeventsRowDeletedEvent) Is Nothing) Then
                RaiseEvent hazardeventsRowDeleted(Me, New hazardeventsRowChangeEvent(CType(e.Row,hazardeventsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.hazardeventsRowDeletingEvent) Is Nothing) Then
                RaiseEvent hazardeventsRowDeleting(Me, New hazardeventsRowChangeEvent(CType(e.Row,hazardeventsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovehazardeventsRow(ByVal row As hazardeventsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dataacquisitionDataSet = New dataacquisitionDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "hazardeventsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class manufacturingordersDataTable
        Inherits Global.System.Data.TypedTableBase(Of manufacturingordersRow)
        
        Private columnmanufacturingOrderId As Global.System.Data.DataColumn
        
        Private columnmanufacturingOrderCustomerOrderId As Global.System.Data.DataColumn
        
        Private columnmanufacturingOrderLabel As Global.System.Data.DataColumn
        
        Private columnmanufacturingOrderCommercialSymbol As Global.System.Data.DataColumn
        
        Private columnmanufacturingOrderIndustrialSymbol As Global.System.Data.DataColumn
        
        Private columnmanufacturingOrderQuantity As Global.System.Data.DataColumn
        
        Private columnmanufacturingOrderDueDate As Global.System.Data.DataColumn
        
        Private columnmanufacturingOrderScheduledDate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "manufacturingorders"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property manufacturingOrderIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmanufacturingOrderId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property manufacturingOrderCustomerOrderIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmanufacturingOrderCustomerOrderId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property manufacturingOrderLabelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmanufacturingOrderLabel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property manufacturingOrderCommercialSymbolColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmanufacturingOrderCommercialSymbol
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property manufacturingOrderIndustrialSymbolColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmanufacturingOrderIndustrialSymbol
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property manufacturingOrderQuantityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmanufacturingOrderQuantity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property manufacturingOrderDueDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmanufacturingOrderDueDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property manufacturingOrderScheduledDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmanufacturingOrderScheduledDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As manufacturingordersRow
            Get
                Return CType(Me.Rows(index),manufacturingordersRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event manufacturingordersRowChanging As manufacturingordersRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event manufacturingordersRowChanged As manufacturingordersRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event manufacturingordersRowDeleting As manufacturingordersRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event manufacturingordersRowDeleted As manufacturingordersRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddmanufacturingordersRow(ByVal row As manufacturingordersRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddmanufacturingordersRow(ByVal manufacturingOrderId As String, ByVal manufacturingOrderCustomerOrderId As String, ByVal manufacturingOrderLabel As String, ByVal manufacturingOrderCommercialSymbol As String, ByVal manufacturingOrderIndustrialSymbol As String, ByVal manufacturingOrderQuantity As UInteger, ByVal manufacturingOrderDueDate As Date, ByVal manufacturingOrderScheduledDate As Date) As manufacturingordersRow
            Dim rowmanufacturingordersRow As manufacturingordersRow = CType(Me.NewRow,manufacturingordersRow)
            Dim columnValuesArray() As Object = New Object() {manufacturingOrderId, manufacturingOrderCustomerOrderId, manufacturingOrderLabel, manufacturingOrderCommercialSymbol, manufacturingOrderIndustrialSymbol, manufacturingOrderQuantity, manufacturingOrderDueDate, manufacturingOrderScheduledDate}
            rowmanufacturingordersRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowmanufacturingordersRow)
            Return rowmanufacturingordersRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindBymanufacturingOrderId(ByVal manufacturingOrderId As String) As manufacturingordersRow
            Return CType(Me.Rows.Find(New Object() {manufacturingOrderId}),manufacturingordersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As manufacturingordersDataTable = CType(MyBase.Clone,manufacturingordersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New manufacturingordersDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnmanufacturingOrderId = MyBase.Columns("manufacturingOrderId")
            Me.columnmanufacturingOrderCustomerOrderId = MyBase.Columns("manufacturingOrderCustomerOrderId")
            Me.columnmanufacturingOrderLabel = MyBase.Columns("manufacturingOrderLabel")
            Me.columnmanufacturingOrderCommercialSymbol = MyBase.Columns("manufacturingOrderCommercialSymbol")
            Me.columnmanufacturingOrderIndustrialSymbol = MyBase.Columns("manufacturingOrderIndustrialSymbol")
            Me.columnmanufacturingOrderQuantity = MyBase.Columns("manufacturingOrderQuantity")
            Me.columnmanufacturingOrderDueDate = MyBase.Columns("manufacturingOrderDueDate")
            Me.columnmanufacturingOrderScheduledDate = MyBase.Columns("manufacturingOrderScheduledDate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnmanufacturingOrderId = New Global.System.Data.DataColumn("manufacturingOrderId", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanufacturingOrderId)
            Me.columnmanufacturingOrderCustomerOrderId = New Global.System.Data.DataColumn("manufacturingOrderCustomerOrderId", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanufacturingOrderCustomerOrderId)
            Me.columnmanufacturingOrderLabel = New Global.System.Data.DataColumn("manufacturingOrderLabel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanufacturingOrderLabel)
            Me.columnmanufacturingOrderCommercialSymbol = New Global.System.Data.DataColumn("manufacturingOrderCommercialSymbol", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanufacturingOrderCommercialSymbol)
            Me.columnmanufacturingOrderIndustrialSymbol = New Global.System.Data.DataColumn("manufacturingOrderIndustrialSymbol", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanufacturingOrderIndustrialSymbol)
            Me.columnmanufacturingOrderQuantity = New Global.System.Data.DataColumn("manufacturingOrderQuantity", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanufacturingOrderQuantity)
            Me.columnmanufacturingOrderDueDate = New Global.System.Data.DataColumn("manufacturingOrderDueDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanufacturingOrderDueDate)
            Me.columnmanufacturingOrderScheduledDate = New Global.System.Data.DataColumn("manufacturingOrderScheduledDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanufacturingOrderScheduledDate)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnmanufacturingOrderId}, true))
            Me.columnmanufacturingOrderId.AllowDBNull = false
            Me.columnmanufacturingOrderId.Unique = true
            Me.columnmanufacturingOrderId.MaxLength = 40
            Me.columnmanufacturingOrderCustomerOrderId.MaxLength = 16
            Me.columnmanufacturingOrderLabel.MaxLength = 45
            Me.columnmanufacturingOrderCommercialSymbol.MaxLength = 20
            Me.columnmanufacturingOrderIndustrialSymbol.MaxLength = 20
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewmanufacturingordersRow() As manufacturingordersRow
            Return CType(Me.NewRow,manufacturingordersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New manufacturingordersRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(manufacturingordersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.manufacturingordersRowChangedEvent) Is Nothing) Then
                RaiseEvent manufacturingordersRowChanged(Me, New manufacturingordersRowChangeEvent(CType(e.Row,manufacturingordersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.manufacturingordersRowChangingEvent) Is Nothing) Then
                RaiseEvent manufacturingordersRowChanging(Me, New manufacturingordersRowChangeEvent(CType(e.Row,manufacturingordersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.manufacturingordersRowDeletedEvent) Is Nothing) Then
                RaiseEvent manufacturingordersRowDeleted(Me, New manufacturingordersRowChangeEvent(CType(e.Row,manufacturingordersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.manufacturingordersRowDeletingEvent) Is Nothing) Then
                RaiseEvent manufacturingordersRowDeleting(Me, New manufacturingordersRowChangeEvent(CType(e.Row,manufacturingordersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovemanufacturingordersRow(ByVal row As manufacturingordersRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dataacquisitionDataSet = New dataacquisitionDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "manufacturingordersDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class measurementresultsDataTable
        Inherits Global.System.Data.TypedTableBase(Of measurementresultsRow)
        
        Private columnmeasurementResultId As Global.System.Data.DataColumn
        
        Private columnmeasurementResultProduct As Global.System.Data.DataColumn
        
        Private columnmeasurementResultWorkOrder As Global.System.Data.DataColumn
        
        Private columnmeasurementResultDate As Global.System.Data.DataColumn
        
        Private columnmeasurementResultProductDefect As Global.System.Data.DataColumn
        
        Private columnmeasurementResultName1 As Global.System.Data.DataColumn
        
        Private columnmeasurementResultMeasure1 As Global.System.Data.DataColumn
        
        Private columnmeasurementResultName2 As Global.System.Data.DataColumn
        
        Private columnmeasurementResultMeasure2 As Global.System.Data.DataColumn
        
        Private columnmeasurementResultName3 As Global.System.Data.DataColumn
        
        Private columnmeasurementResultMeasure3 As Global.System.Data.DataColumn
        
        Private columnmeasurementResultName4 As Global.System.Data.DataColumn
        
        Private columnmeasurementResultMeasure4 As Global.System.Data.DataColumn
        
        Private columnmeasurementResultName5 As Global.System.Data.DataColumn
        
        Private columnmeasurementResultMeasure5 As Global.System.Data.DataColumn
        
        Private columnmeasurementResultName6 As Global.System.Data.DataColumn
        
        Private columnmeasurementResultMeasure6 As Global.System.Data.DataColumn
        
        Private columnmeasurementResultName7 As Global.System.Data.DataColumn
        
        Private columnmeasurementResultMeasure7 As Global.System.Data.DataColumn
        
        Private columnmeasurementResultName8 As Global.System.Data.DataColumn
        
        Private columnmeasurementResultMeasure8 As Global.System.Data.DataColumn
        
        Private columnmeasurementResultName9 As Global.System.Data.DataColumn
        
        Private columnmeasurementResultMeasure9 As Global.System.Data.DataColumn
        
        Private columnmeasurementResultName10 As Global.System.Data.DataColumn
        
        Private columnmeasurementResultMeasure10 As Global.System.Data.DataColumn
        
        Private columnmeasurementResultName11 As Global.System.Data.DataColumn
        
        Private columnmeasurementResultMeasure11 As Global.System.Data.DataColumn
        
        Private columnmeasurementResultName12 As Global.System.Data.DataColumn
        
        Private columnmeasurementResultMeasure12 As Global.System.Data.DataColumn
        
        Private columnmeasurementResultName13 As Global.System.Data.DataColumn
        
        Private columnmeasurementResultMeasure13 As Global.System.Data.DataColumn
        
        Private columnmeasurementResultName14 As Global.System.Data.DataColumn
        
        Private columnmeasurementResultMeasure14 As Global.System.Data.DataColumn
        
        Private columnmeasurementResultName15 As Global.System.Data.DataColumn
        
        Private columnmeasurementResultMeasure15 As Global.System.Data.DataColumn
        
        Private columnmeasurementResultName16 As Global.System.Data.DataColumn
        
        Private columnmeasurementResultMeasure16 As Global.System.Data.DataColumn
        
        Private columnmeasurementResultName17 As Global.System.Data.DataColumn
        
        Private columnmeasurementResultMeasure17 As Global.System.Data.DataColumn
        
        Private columnmeasurementResultName18 As Global.System.Data.DataColumn
        
        Private columnmeasurementResultMeasure18 As Global.System.Data.DataColumn
        
        Private columnmeasurementResultName19 As Global.System.Data.DataColumn
        
        Private columnmeasurementResultMeasure19 As Global.System.Data.DataColumn
        
        Private columnmeasurementResultName20 As Global.System.Data.DataColumn
        
        Private columnmeasurementResultMeasure20 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "measurementresults"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property measurementResultIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmeasurementResultId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property measurementResultProductColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmeasurementResultProduct
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property measurementResultWorkOrderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmeasurementResultWorkOrder
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property measurementResultDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmeasurementResultDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property measurementResultProductDefectColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmeasurementResultProductDefect
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property measurementResultName1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnmeasurementResultName1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property measurementResultMeasure1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnmeasurementResultMeasure1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property measurementResultName2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnmeasurementResultName2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property measurementResultMeasure2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnmeasurementResultMeasure2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property measurementResultName3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnmeasurementResultName3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property measurementResultMeasure3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnmeasurementResultMeasure3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property measurementResultName4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnmeasurementResultName4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property measurementResultMeasure4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnmeasurementResultMeasure4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property measurementResultName5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnmeasurementResultName5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property measurementResultMeasure5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnmeasurementResultMeasure5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property measurementResultName6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnmeasurementResultName6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property measurementResultMeasure6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnmeasurementResultMeasure6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property measurementResultName7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnmeasurementResultName7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property measurementResultMeasure7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnmeasurementResultMeasure7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property measurementResultName8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnmeasurementResultName8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property measurementResultMeasure8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnmeasurementResultMeasure8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property measurementResultName9Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnmeasurementResultName9
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property measurementResultMeasure9Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnmeasurementResultMeasure9
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property measurementResultName10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnmeasurementResultName10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property measurementResultMeasure10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnmeasurementResultMeasure10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property measurementResultName11Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnmeasurementResultName11
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property measurementResultMeasure11Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnmeasurementResultMeasure11
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property measurementResultName12Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnmeasurementResultName12
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property measurementResultMeasure12Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnmeasurementResultMeasure12
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property measurementResultName13Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnmeasurementResultName13
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property measurementResultMeasure13Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnmeasurementResultMeasure13
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property measurementResultName14Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnmeasurementResultName14
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property measurementResultMeasure14Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnmeasurementResultMeasure14
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property measurementResultName15Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnmeasurementResultName15
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property measurementResultMeasure15Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnmeasurementResultMeasure15
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property measurementResultName16Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnmeasurementResultName16
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property measurementResultMeasure16Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnmeasurementResultMeasure16
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property measurementResultName17Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnmeasurementResultName17
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property measurementResultMeasure17Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnmeasurementResultMeasure17
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property measurementResultName18Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnmeasurementResultName18
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property measurementResultMeasure18Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnmeasurementResultMeasure18
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property measurementResultName19Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnmeasurementResultName19
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property measurementResultMeasure19Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnmeasurementResultMeasure19
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property measurementResultName20Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnmeasurementResultName20
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property measurementResultMeasure20Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnmeasurementResultMeasure20
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As measurementresultsRow
            Get
                Return CType(Me.Rows(index),measurementresultsRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event measurementresultsRowChanging As measurementresultsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event measurementresultsRowChanged As measurementresultsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event measurementresultsRowDeleting As measurementresultsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event measurementresultsRowDeleted As measurementresultsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddmeasurementresultsRow(ByVal row As measurementresultsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddmeasurementresultsRow( _
                    ByVal measurementResultId As String,  _
                    ByVal measurementResultProduct As String,  _
                    ByVal measurementResultWorkOrder As String,  _
                    ByVal measurementResultDate As Date,  _
                    ByVal measurementResultProductDefect As UInteger,  _
                    ByVal measurementResultName1 As String,  _
                    ByVal measurementResultMeasure1 As Single,  _
                    ByVal measurementResultName2 As String,  _
                    ByVal measurementResultMeasure2 As Single,  _
                    ByVal measurementResultName3 As String,  _
                    ByVal measurementResultMeasure3 As Single,  _
                    ByVal measurementResultName4 As String,  _
                    ByVal measurementResultMeasure4 As Single,  _
                    ByVal measurementResultName5 As String,  _
                    ByVal measurementResultMeasure5 As Single,  _
                    ByVal measurementResultName6 As String,  _
                    ByVal measurementResultMeasure6 As Single,  _
                    ByVal measurementResultName7 As String,  _
                    ByVal measurementResultMeasure7 As Single,  _
                    ByVal measurementResultName8 As String,  _
                    ByVal measurementResultMeasure8 As Single,  _
                    ByVal measurementResultName9 As String,  _
                    ByVal measurementResultMeasure9 As Single,  _
                    ByVal measurementResultName10 As String,  _
                    ByVal measurementResultMeasure10 As Single,  _
                    ByVal measurementResultName11 As String,  _
                    ByVal measurementResultMeasure11 As Single,  _
                    ByVal measurementResultName12 As String,  _
                    ByVal measurementResultMeasure12 As Single,  _
                    ByVal measurementResultName13 As String,  _
                    ByVal measurementResultMeasure13 As Single,  _
                    ByVal measurementResultName14 As String,  _
                    ByVal measurementResultMeasure14 As Single,  _
                    ByVal measurementResultName15 As String,  _
                    ByVal measurementResultMeasure15 As Single,  _
                    ByVal measurementResultName16 As String,  _
                    ByVal measurementResultMeasure16 As Single,  _
                    ByVal measurementResultName17 As String,  _
                    ByVal measurementResultMeasure17 As Single,  _
                    ByVal measurementResultName18 As String,  _
                    ByVal measurementResultMeasure18 As Single,  _
                    ByVal measurementResultName19 As String,  _
                    ByVal measurementResultMeasure19 As Single,  _
                    ByVal measurementResultName20 As String,  _
                    ByVal measurementResultMeasure20 As Single) As measurementresultsRow
            Dim rowmeasurementresultsRow As measurementresultsRow = CType(Me.NewRow,measurementresultsRow)
            Dim columnValuesArray() As Object = New Object() {measurementResultId, measurementResultProduct, measurementResultWorkOrder, measurementResultDate, measurementResultProductDefect, measurementResultName1, measurementResultMeasure1, measurementResultName2, measurementResultMeasure2, measurementResultName3, measurementResultMeasure3, measurementResultName4, measurementResultMeasure4, measurementResultName5, measurementResultMeasure5, measurementResultName6, measurementResultMeasure6, measurementResultName7, measurementResultMeasure7, measurementResultName8, measurementResultMeasure8, measurementResultName9, measurementResultMeasure9, measurementResultName10, measurementResultMeasure10, measurementResultName11, measurementResultMeasure11, measurementResultName12, measurementResultMeasure12, measurementResultName13, measurementResultMeasure13, measurementResultName14, measurementResultMeasure14, measurementResultName15, measurementResultMeasure15, measurementResultName16, measurementResultMeasure16, measurementResultName17, measurementResultMeasure17, measurementResultName18, measurementResultMeasure18, measurementResultName19, measurementResultMeasure19, measurementResultName20, measurementResultMeasure20}
            rowmeasurementresultsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowmeasurementresultsRow)
            Return rowmeasurementresultsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindBymeasurementResultId(ByVal measurementResultId As String) As measurementresultsRow
            Return CType(Me.Rows.Find(New Object() {measurementResultId}),measurementresultsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As measurementresultsDataTable = CType(MyBase.Clone,measurementresultsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New measurementresultsDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnmeasurementResultId = MyBase.Columns("measurementResultId")
            Me.columnmeasurementResultProduct = MyBase.Columns("measurementResultProduct")
            Me.columnmeasurementResultWorkOrder = MyBase.Columns("measurementResultWorkOrder")
            Me.columnmeasurementResultDate = MyBase.Columns("measurementResultDate")
            Me.columnmeasurementResultProductDefect = MyBase.Columns("measurementResultProductDefect")
            Me.columnmeasurementResultName1 = MyBase.Columns("measurementResultName1")
            Me.columnmeasurementResultMeasure1 = MyBase.Columns("measurementResultMeasure1")
            Me.columnmeasurementResultName2 = MyBase.Columns("measurementResultName2")
            Me.columnmeasurementResultMeasure2 = MyBase.Columns("measurementResultMeasure2")
            Me.columnmeasurementResultName3 = MyBase.Columns("measurementResultName3")
            Me.columnmeasurementResultMeasure3 = MyBase.Columns("measurementResultMeasure3")
            Me.columnmeasurementResultName4 = MyBase.Columns("measurementResultName4")
            Me.columnmeasurementResultMeasure4 = MyBase.Columns("measurementResultMeasure4")
            Me.columnmeasurementResultName5 = MyBase.Columns("measurementResultName5")
            Me.columnmeasurementResultMeasure5 = MyBase.Columns("measurementResultMeasure5")
            Me.columnmeasurementResultName6 = MyBase.Columns("measurementResultName6")
            Me.columnmeasurementResultMeasure6 = MyBase.Columns("measurementResultMeasure6")
            Me.columnmeasurementResultName7 = MyBase.Columns("measurementResultName7")
            Me.columnmeasurementResultMeasure7 = MyBase.Columns("measurementResultMeasure7")
            Me.columnmeasurementResultName8 = MyBase.Columns("measurementResultName8")
            Me.columnmeasurementResultMeasure8 = MyBase.Columns("measurementResultMeasure8")
            Me.columnmeasurementResultName9 = MyBase.Columns("measurementResultName9")
            Me.columnmeasurementResultMeasure9 = MyBase.Columns("measurementResultMeasure9")
            Me.columnmeasurementResultName10 = MyBase.Columns("measurementResultName10")
            Me.columnmeasurementResultMeasure10 = MyBase.Columns("measurementResultMeasure10")
            Me.columnmeasurementResultName11 = MyBase.Columns("measurementResultName11")
            Me.columnmeasurementResultMeasure11 = MyBase.Columns("measurementResultMeasure11")
            Me.columnmeasurementResultName12 = MyBase.Columns("measurementResultName12")
            Me.columnmeasurementResultMeasure12 = MyBase.Columns("measurementResultMeasure12")
            Me.columnmeasurementResultName13 = MyBase.Columns("measurementResultName13")
            Me.columnmeasurementResultMeasure13 = MyBase.Columns("measurementResultMeasure13")
            Me.columnmeasurementResultName14 = MyBase.Columns("measurementResultName14")
            Me.columnmeasurementResultMeasure14 = MyBase.Columns("measurementResultMeasure14")
            Me.columnmeasurementResultName15 = MyBase.Columns("measurementResultName15")
            Me.columnmeasurementResultMeasure15 = MyBase.Columns("measurementResultMeasure15")
            Me.columnmeasurementResultName16 = MyBase.Columns("measurementResultName16")
            Me.columnmeasurementResultMeasure16 = MyBase.Columns("measurementResultMeasure16")
            Me.columnmeasurementResultName17 = MyBase.Columns("measurementResultName17")
            Me.columnmeasurementResultMeasure17 = MyBase.Columns("measurementResultMeasure17")
            Me.columnmeasurementResultName18 = MyBase.Columns("measurementResultName18")
            Me.columnmeasurementResultMeasure18 = MyBase.Columns("measurementResultMeasure18")
            Me.columnmeasurementResultName19 = MyBase.Columns("measurementResultName19")
            Me.columnmeasurementResultMeasure19 = MyBase.Columns("measurementResultMeasure19")
            Me.columnmeasurementResultName20 = MyBase.Columns("measurementResultName20")
            Me.columnmeasurementResultMeasure20 = MyBase.Columns("measurementResultMeasure20")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnmeasurementResultId = New Global.System.Data.DataColumn("measurementResultId", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmeasurementResultId)
            Me.columnmeasurementResultProduct = New Global.System.Data.DataColumn("measurementResultProduct", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmeasurementResultProduct)
            Me.columnmeasurementResultWorkOrder = New Global.System.Data.DataColumn("measurementResultWorkOrder", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmeasurementResultWorkOrder)
            Me.columnmeasurementResultDate = New Global.System.Data.DataColumn("measurementResultDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmeasurementResultDate)
            Me.columnmeasurementResultProductDefect = New Global.System.Data.DataColumn("measurementResultProductDefect", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmeasurementResultProductDefect)
            Me.columnmeasurementResultName1 = New Global.System.Data.DataColumn("measurementResultName1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmeasurementResultName1)
            Me.columnmeasurementResultMeasure1 = New Global.System.Data.DataColumn("measurementResultMeasure1", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmeasurementResultMeasure1)
            Me.columnmeasurementResultName2 = New Global.System.Data.DataColumn("measurementResultName2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmeasurementResultName2)
            Me.columnmeasurementResultMeasure2 = New Global.System.Data.DataColumn("measurementResultMeasure2", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmeasurementResultMeasure2)
            Me.columnmeasurementResultName3 = New Global.System.Data.DataColumn("measurementResultName3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmeasurementResultName3)
            Me.columnmeasurementResultMeasure3 = New Global.System.Data.DataColumn("measurementResultMeasure3", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmeasurementResultMeasure3)
            Me.columnmeasurementResultName4 = New Global.System.Data.DataColumn("measurementResultName4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmeasurementResultName4)
            Me.columnmeasurementResultMeasure4 = New Global.System.Data.DataColumn("measurementResultMeasure4", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmeasurementResultMeasure4)
            Me.columnmeasurementResultName5 = New Global.System.Data.DataColumn("measurementResultName5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmeasurementResultName5)
            Me.columnmeasurementResultMeasure5 = New Global.System.Data.DataColumn("measurementResultMeasure5", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmeasurementResultMeasure5)
            Me.columnmeasurementResultName6 = New Global.System.Data.DataColumn("measurementResultName6", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmeasurementResultName6)
            Me.columnmeasurementResultMeasure6 = New Global.System.Data.DataColumn("measurementResultMeasure6", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmeasurementResultMeasure6)
            Me.columnmeasurementResultName7 = New Global.System.Data.DataColumn("measurementResultName7", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmeasurementResultName7)
            Me.columnmeasurementResultMeasure7 = New Global.System.Data.DataColumn("measurementResultMeasure7", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmeasurementResultMeasure7)
            Me.columnmeasurementResultName8 = New Global.System.Data.DataColumn("measurementResultName8", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmeasurementResultName8)
            Me.columnmeasurementResultMeasure8 = New Global.System.Data.DataColumn("measurementResultMeasure8", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmeasurementResultMeasure8)
            Me.columnmeasurementResultName9 = New Global.System.Data.DataColumn("measurementResultName9", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmeasurementResultName9)
            Me.columnmeasurementResultMeasure9 = New Global.System.Data.DataColumn("measurementResultMeasure9", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmeasurementResultMeasure9)
            Me.columnmeasurementResultName10 = New Global.System.Data.DataColumn("measurementResultName10", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmeasurementResultName10)
            Me.columnmeasurementResultMeasure10 = New Global.System.Data.DataColumn("measurementResultMeasure10", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmeasurementResultMeasure10)
            Me.columnmeasurementResultName11 = New Global.System.Data.DataColumn("measurementResultName11", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmeasurementResultName11)
            Me.columnmeasurementResultMeasure11 = New Global.System.Data.DataColumn("measurementResultMeasure11", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmeasurementResultMeasure11)
            Me.columnmeasurementResultName12 = New Global.System.Data.DataColumn("measurementResultName12", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmeasurementResultName12)
            Me.columnmeasurementResultMeasure12 = New Global.System.Data.DataColumn("measurementResultMeasure12", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmeasurementResultMeasure12)
            Me.columnmeasurementResultName13 = New Global.System.Data.DataColumn("measurementResultName13", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmeasurementResultName13)
            Me.columnmeasurementResultMeasure13 = New Global.System.Data.DataColumn("measurementResultMeasure13", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmeasurementResultMeasure13)
            Me.columnmeasurementResultName14 = New Global.System.Data.DataColumn("measurementResultName14", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmeasurementResultName14)
            Me.columnmeasurementResultMeasure14 = New Global.System.Data.DataColumn("measurementResultMeasure14", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmeasurementResultMeasure14)
            Me.columnmeasurementResultName15 = New Global.System.Data.DataColumn("measurementResultName15", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmeasurementResultName15)
            Me.columnmeasurementResultMeasure15 = New Global.System.Data.DataColumn("measurementResultMeasure15", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmeasurementResultMeasure15)
            Me.columnmeasurementResultName16 = New Global.System.Data.DataColumn("measurementResultName16", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmeasurementResultName16)
            Me.columnmeasurementResultMeasure16 = New Global.System.Data.DataColumn("measurementResultMeasure16", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmeasurementResultMeasure16)
            Me.columnmeasurementResultName17 = New Global.System.Data.DataColumn("measurementResultName17", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmeasurementResultName17)
            Me.columnmeasurementResultMeasure17 = New Global.System.Data.DataColumn("measurementResultMeasure17", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmeasurementResultMeasure17)
            Me.columnmeasurementResultName18 = New Global.System.Data.DataColumn("measurementResultName18", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmeasurementResultName18)
            Me.columnmeasurementResultMeasure18 = New Global.System.Data.DataColumn("measurementResultMeasure18", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmeasurementResultMeasure18)
            Me.columnmeasurementResultName19 = New Global.System.Data.DataColumn("measurementResultName19", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmeasurementResultName19)
            Me.columnmeasurementResultMeasure19 = New Global.System.Data.DataColumn("measurementResultMeasure19", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmeasurementResultMeasure19)
            Me.columnmeasurementResultName20 = New Global.System.Data.DataColumn("measurementResultName20", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmeasurementResultName20)
            Me.columnmeasurementResultMeasure20 = New Global.System.Data.DataColumn("measurementResultMeasure20", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmeasurementResultMeasure20)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnmeasurementResultId}, true))
            Me.columnmeasurementResultId.AllowDBNull = false
            Me.columnmeasurementResultId.Unique = true
            Me.columnmeasurementResultId.MaxLength = 25
            Me.columnmeasurementResultProduct.MaxLength = 25
            Me.columnmeasurementResultWorkOrder.MaxLength = 25
            Me.columnmeasurementResultDate.AllowDBNull = false
            Me.columnmeasurementResultName1.AllowDBNull = false
            Me.columnmeasurementResultName1.MaxLength = 45
            Me.columnmeasurementResultMeasure1.AllowDBNull = false
            Me.columnmeasurementResultName2.MaxLength = 45
            Me.columnmeasurementResultName3.MaxLength = 45
            Me.columnmeasurementResultName4.MaxLength = 45
            Me.columnmeasurementResultName5.MaxLength = 45
            Me.columnmeasurementResultName6.MaxLength = 45
            Me.columnmeasurementResultName7.MaxLength = 45
            Me.columnmeasurementResultName8.MaxLength = 45
            Me.columnmeasurementResultName9.MaxLength = 45
            Me.columnmeasurementResultName10.MaxLength = 45
            Me.columnmeasurementResultName11.MaxLength = 45
            Me.columnmeasurementResultName12.MaxLength = 45
            Me.columnmeasurementResultName13.MaxLength = 45
            Me.columnmeasurementResultName14.MaxLength = 45
            Me.columnmeasurementResultName15.MaxLength = 45
            Me.columnmeasurementResultName16.MaxLength = 45
            Me.columnmeasurementResultName17.MaxLength = 45
            Me.columnmeasurementResultName18.MaxLength = 45
            Me.columnmeasurementResultName19.MaxLength = 45
            Me.columnmeasurementResultName20.MaxLength = 45
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewmeasurementresultsRow() As measurementresultsRow
            Return CType(Me.NewRow,measurementresultsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New measurementresultsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(measurementresultsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.measurementresultsRowChangedEvent) Is Nothing) Then
                RaiseEvent measurementresultsRowChanged(Me, New measurementresultsRowChangeEvent(CType(e.Row,measurementresultsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.measurementresultsRowChangingEvent) Is Nothing) Then
                RaiseEvent measurementresultsRowChanging(Me, New measurementresultsRowChangeEvent(CType(e.Row,measurementresultsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.measurementresultsRowDeletedEvent) Is Nothing) Then
                RaiseEvent measurementresultsRowDeleted(Me, New measurementresultsRowChangeEvent(CType(e.Row,measurementresultsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.measurementresultsRowDeletingEvent) Is Nothing) Then
                RaiseEvent measurementresultsRowDeleting(Me, New measurementresultsRowChangeEvent(CType(e.Row,measurementresultsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovemeasurementresultsRow(ByVal row As measurementresultsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dataacquisitionDataSet = New dataacquisitionDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "measurementresultsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class productdefectcodesDataTable
        Inherits Global.System.Data.TypedTableBase(Of productdefectcodesRow)
        
        Private columnproductDefectCode As Global.System.Data.DataColumn
        
        Private columnproductDefectText As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "productdefectcodes"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property productDefectCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproductDefectCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property productDefectTextColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproductDefectText
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As productdefectcodesRow
            Get
                Return CType(Me.Rows(index),productdefectcodesRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event productdefectcodesRowChanging As productdefectcodesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event productdefectcodesRowChanged As productdefectcodesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event productdefectcodesRowDeleting As productdefectcodesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event productdefectcodesRowDeleted As productdefectcodesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddproductdefectcodesRow(ByVal row As productdefectcodesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddproductdefectcodesRow(ByVal productDefectCode As UInteger, ByVal productDefectText As String) As productdefectcodesRow
            Dim rowproductdefectcodesRow As productdefectcodesRow = CType(Me.NewRow,productdefectcodesRow)
            Dim columnValuesArray() As Object = New Object() {productDefectCode, productDefectText}
            rowproductdefectcodesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowproductdefectcodesRow)
            Return rowproductdefectcodesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByproductDefectCode(ByVal productDefectCode As UInteger) As productdefectcodesRow
            Return CType(Me.Rows.Find(New Object() {productDefectCode}),productdefectcodesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As productdefectcodesDataTable = CType(MyBase.Clone,productdefectcodesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New productdefectcodesDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnproductDefectCode = MyBase.Columns("productDefectCode")
            Me.columnproductDefectText = MyBase.Columns("productDefectText")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnproductDefectCode = New Global.System.Data.DataColumn("productDefectCode", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproductDefectCode)
            Me.columnproductDefectText = New Global.System.Data.DataColumn("productDefectText", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproductDefectText)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnproductDefectCode}, true))
            Me.columnproductDefectCode.AllowDBNull = false
            Me.columnproductDefectCode.Unique = true
            Me.columnproductDefectText.MaxLength = 45
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewproductdefectcodesRow() As productdefectcodesRow
            Return CType(Me.NewRow,productdefectcodesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New productdefectcodesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(productdefectcodesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.productdefectcodesRowChangedEvent) Is Nothing) Then
                RaiseEvent productdefectcodesRowChanged(Me, New productdefectcodesRowChangeEvent(CType(e.Row,productdefectcodesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.productdefectcodesRowChangingEvent) Is Nothing) Then
                RaiseEvent productdefectcodesRowChanging(Me, New productdefectcodesRowChangeEvent(CType(e.Row,productdefectcodesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.productdefectcodesRowDeletedEvent) Is Nothing) Then
                RaiseEvent productdefectcodesRowDeleted(Me, New productdefectcodesRowChangeEvent(CType(e.Row,productdefectcodesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.productdefectcodesRowDeletingEvent) Is Nothing) Then
                RaiseEvent productdefectcodesRowDeleting(Me, New productdefectcodesRowChangeEvent(CType(e.Row,productdefectcodesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveproductdefectcodesRow(ByVal row As productdefectcodesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dataacquisitionDataSet = New dataacquisitionDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "productdefectcodesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class workordersDataTable
        Inherits Global.System.Data.TypedTableBase(Of workordersRow)
        
        Private columnworkOrderId As Global.System.Data.DataColumn
        
        Private columnworkOrderManufacturingOrder As Global.System.Data.DataColumn
        
        Private columnworkOrderEquipment As Global.System.Data.DataColumn
        
        Private columnworkOrderPhase As Global.System.Data.DataColumn
        
        Private columnworkOrderDuration As Global.System.Data.DataColumn
        
        Private columnworkOrderBeginDate As Global.System.Data.DataColumn
        
        Private columnworkOrderEndDate As Global.System.Data.DataColumn
        
        Private columnworkOrderProcessedQuantity As Global.System.Data.DataColumn
        
        Private columnworkOrderQuantityOk As Global.System.Data.DataColumn
        
        Private columnworkOrderQuantityNok As Global.System.Data.DataColumn
        
        Private columnworkOrderPreviousWorkOrder As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "workorders"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property workOrderIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnworkOrderId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property workOrderManufacturingOrderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnworkOrderManufacturingOrder
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property workOrderEquipmentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnworkOrderEquipment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property workOrderPhaseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnworkOrderPhase
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property workOrderDurationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnworkOrderDuration
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property workOrderBeginDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnworkOrderBeginDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property workOrderEndDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnworkOrderEndDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property workOrderProcessedQuantityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnworkOrderProcessedQuantity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property workOrderQuantityOkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnworkOrderQuantityOk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property workOrderQuantityNokColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnworkOrderQuantityNok
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property workOrderPreviousWorkOrderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnworkOrderPreviousWorkOrder
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As workordersRow
            Get
                Return CType(Me.Rows(index),workordersRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event workordersRowChanging As workordersRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event workordersRowChanged As workordersRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event workordersRowDeleting As workordersRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event workordersRowDeleted As workordersRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddworkordersRow(ByVal row As workordersRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddworkordersRow(ByVal workOrderId As String, ByVal parentmanufacturingordersRowByFK_workOrderManufacturingOrder As manufacturingordersRow, ByVal parentequipmentsRowByFK_workOrderEquipment As equipmentsRow, ByVal workOrderPhase As UInteger, ByVal workOrderDuration As ULong, ByVal workOrderBeginDate As Date, ByVal workOrderEndDate As Date, ByVal workOrderProcessedQuantity As UInteger, ByVal workOrderQuantityOk As UInteger, ByVal workOrderQuantityNok As UInteger, ByVal workOrderPreviousWorkOrder As UInteger) As workordersRow
            Dim rowworkordersRow As workordersRow = CType(Me.NewRow,workordersRow)
            Dim columnValuesArray() As Object = New Object() {workOrderId, Nothing, Nothing, workOrderPhase, workOrderDuration, workOrderBeginDate, workOrderEndDate, workOrderProcessedQuantity, workOrderQuantityOk, workOrderQuantityNok, workOrderPreviousWorkOrder}
            If (Not (parentmanufacturingordersRowByFK_workOrderManufacturingOrder) Is Nothing) Then
                columnValuesArray(1) = parentmanufacturingordersRowByFK_workOrderManufacturingOrder(0)
            End If
            If (Not (parentequipmentsRowByFK_workOrderEquipment) Is Nothing) Then
                columnValuesArray(2) = parentequipmentsRowByFK_workOrderEquipment(0)
            End If
            rowworkordersRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowworkordersRow)
            Return rowworkordersRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByworkOrderId(ByVal workOrderId As String) As workordersRow
            Return CType(Me.Rows.Find(New Object() {workOrderId}),workordersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As workordersDataTable = CType(MyBase.Clone,workordersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New workordersDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnworkOrderId = MyBase.Columns("workOrderId")
            Me.columnworkOrderManufacturingOrder = MyBase.Columns("workOrderManufacturingOrder")
            Me.columnworkOrderEquipment = MyBase.Columns("workOrderEquipment")
            Me.columnworkOrderPhase = MyBase.Columns("workOrderPhase")
            Me.columnworkOrderDuration = MyBase.Columns("workOrderDuration")
            Me.columnworkOrderBeginDate = MyBase.Columns("workOrderBeginDate")
            Me.columnworkOrderEndDate = MyBase.Columns("workOrderEndDate")
            Me.columnworkOrderProcessedQuantity = MyBase.Columns("workOrderProcessedQuantity")
            Me.columnworkOrderQuantityOk = MyBase.Columns("workOrderQuantityOk")
            Me.columnworkOrderQuantityNok = MyBase.Columns("workOrderQuantityNok")
            Me.columnworkOrderPreviousWorkOrder = MyBase.Columns("workOrderPreviousWorkOrder")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnworkOrderId = New Global.System.Data.DataColumn("workOrderId", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnworkOrderId)
            Me.columnworkOrderManufacturingOrder = New Global.System.Data.DataColumn("workOrderManufacturingOrder", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnworkOrderManufacturingOrder)
            Me.columnworkOrderEquipment = New Global.System.Data.DataColumn("workOrderEquipment", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnworkOrderEquipment)
            Me.columnworkOrderPhase = New Global.System.Data.DataColumn("workOrderPhase", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnworkOrderPhase)
            Me.columnworkOrderDuration = New Global.System.Data.DataColumn("workOrderDuration", GetType(ULong), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnworkOrderDuration)
            Me.columnworkOrderBeginDate = New Global.System.Data.DataColumn("workOrderBeginDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnworkOrderBeginDate)
            Me.columnworkOrderEndDate = New Global.System.Data.DataColumn("workOrderEndDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnworkOrderEndDate)
            Me.columnworkOrderProcessedQuantity = New Global.System.Data.DataColumn("workOrderProcessedQuantity", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnworkOrderProcessedQuantity)
            Me.columnworkOrderQuantityOk = New Global.System.Data.DataColumn("workOrderQuantityOk", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnworkOrderQuantityOk)
            Me.columnworkOrderQuantityNok = New Global.System.Data.DataColumn("workOrderQuantityNok", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnworkOrderQuantityNok)
            Me.columnworkOrderPreviousWorkOrder = New Global.System.Data.DataColumn("workOrderPreviousWorkOrder", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnworkOrderPreviousWorkOrder)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnworkOrderId}, true))
            Me.columnworkOrderId.AllowDBNull = false
            Me.columnworkOrderId.Unique = true
            Me.columnworkOrderId.MaxLength = 40
            Me.columnworkOrderManufacturingOrder.AllowDBNull = false
            Me.columnworkOrderManufacturingOrder.MaxLength = 40
            Me.columnworkOrderEquipment.AllowDBNull = false
            Me.columnworkOrderBeginDate.AllowDBNull = false
            Me.columnworkOrderEndDate.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewworkordersRow() As workordersRow
            Return CType(Me.NewRow,workordersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New workordersRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(workordersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.workordersRowChangedEvent) Is Nothing) Then
                RaiseEvent workordersRowChanged(Me, New workordersRowChangeEvent(CType(e.Row,workordersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.workordersRowChangingEvent) Is Nothing) Then
                RaiseEvent workordersRowChanging(Me, New workordersRowChangeEvent(CType(e.Row,workordersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.workordersRowDeletedEvent) Is Nothing) Then
                RaiseEvent workordersRowDeleted(Me, New workordersRowChangeEvent(CType(e.Row,workordersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.workordersRowDeletingEvent) Is Nothing) Then
                RaiseEvent workordersRowDeleting(Me, New workordersRowChangeEvent(CType(e.Row,workordersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveworkordersRow(ByVal row As workordersRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As dataacquisitionDataSet = New dataacquisitionDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "workordersDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class equipmentsRow
        Inherits Global.System.Data.DataRow
        
        Private tableequipments As equipmentsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableequipments = CType(Me.Table,equipmentsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property equipmentId() As UInteger
            Get
                Return CType(Me(Me.tableequipments.equipmentIdColumn),UInteger)
            End Get
            Set
                Me(Me.tableequipments.equipmentIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property equipmentLabel() As String
            Get
                Return CType(Me(Me.tableequipments.equipmentLabelColumn),String)
            End Get
            Set
                Me(Me.tableequipments.equipmentLabelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property equipmentProductionLine() As String
            Get
                Try 
                    Return CType(Me(Me.tableequipments.equipmentProductionLineColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'equipmentProductionLine' in table 'equipments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableequipments.equipmentProductionLineColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property equipmentDescription() As String
            Get
                Try 
                    Return CType(Me(Me.tableequipments.equipmentDescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'equipmentDescription' in table 'equipments' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableequipments.equipmentDescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsequipmentProductionLineNull() As Boolean
            Return Me.IsNull(Me.tableequipments.equipmentProductionLineColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetequipmentProductionLineNull()
            Me(Me.tableequipments.equipmentProductionLineColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsequipmentDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableequipments.equipmentDescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetequipmentDescriptionNull()
            Me(Me.tableequipments.equipmentDescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GethazardeventsRows() As hazardeventsRow()
            If (Me.Table.ChildRelations("FK_HazardEquipment") Is Nothing) Then
                Return New hazardeventsRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_HazardEquipment")),hazardeventsRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetworkordersRows() As workordersRow()
            If (Me.Table.ChildRelations("FK_workOrderEquipment") Is Nothing) Then
                Return New workordersRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_workOrderEquipment")),workordersRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class hazardeventsRow
        Inherits Global.System.Data.DataRow
        
        Private tablehazardevents As hazardeventsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablehazardevents = CType(Me.Table,hazardeventsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property HazardEventId() As String
            Get
                Return CType(Me(Me.tablehazardevents.HazardEventIdColumn),String)
            End Get
            Set
                Me(Me.tablehazardevents.HazardEventIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property HazardEventLabel() As String
            Get
                Return CType(Me(Me.tablehazardevents.HazardEventLabelColumn),String)
            End Get
            Set
                Me(Me.tablehazardevents.HazardEventLabelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property HazardEventGravity() As String
            Get
                Return CType(Me(Me.tablehazardevents.HazardEventGravityColumn),String)
            End Get
            Set
                Me(Me.tablehazardevents.HazardEventGravityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property HazardEventEquipment() As UInteger
            Get
                Return CType(Me(Me.tablehazardevents.HazardEventEquipmentColumn),UInteger)
            End Get
            Set
                Me(Me.tablehazardevents.HazardEventEquipmentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property HazardEventWorkOrder() As String
            Get
                Return CType(Me(Me.tablehazardevents.HazardEventWorkOrderColumn),String)
            End Get
            Set
                Me(Me.tablehazardevents.HazardEventWorkOrderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property HazardEventBeginDate() As Date
            Get
                Return CType(Me(Me.tablehazardevents.HazardEventBeginDateColumn),Date)
            End Get
            Set
                Me(Me.tablehazardevents.HazardEventBeginDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property HazardEventEndDate() As Date
            Get
                Return CType(Me(Me.tablehazardevents.HazardEventEndDateColumn),Date)
            End Get
            Set
                Me(Me.tablehazardevents.HazardEventEndDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property HazardEventDuration() As UInteger
            Get
                Return CType(Me(Me.tablehazardevents.HazardEventDurationColumn),UInteger)
            End Get
            Set
                Me(Me.tablehazardevents.HazardEventDurationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property equipmentsRow() As equipmentsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_HazardEquipment")),equipmentsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_HazardEquipment"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class manufacturingordersRow
        Inherits Global.System.Data.DataRow
        
        Private tablemanufacturingorders As manufacturingordersDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablemanufacturingorders = CType(Me.Table,manufacturingordersDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property manufacturingOrderId() As String
            Get
                Return CType(Me(Me.tablemanufacturingorders.manufacturingOrderIdColumn),String)
            End Get
            Set
                Me(Me.tablemanufacturingorders.manufacturingOrderIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property manufacturingOrderCustomerOrderId() As String
            Get
                Try 
                    Return CType(Me(Me.tablemanufacturingorders.manufacturingOrderCustomerOrderIdColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'manufacturingOrderCustomerOrderId' in table 'manufacturingo"& _ 
                            "rders' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemanufacturingorders.manufacturingOrderCustomerOrderIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property manufacturingOrderLabel() As String
            Get
                Try 
                    Return CType(Me(Me.tablemanufacturingorders.manufacturingOrderLabelColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'manufacturingOrderLabel' in table 'manufacturingorders' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemanufacturingorders.manufacturingOrderLabelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property manufacturingOrderCommercialSymbol() As String
            Get
                Try 
                    Return CType(Me(Me.tablemanufacturingorders.manufacturingOrderCommercialSymbolColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'manufacturingOrderCommercialSymbol' in table 'manufacturing"& _ 
                            "orders' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemanufacturingorders.manufacturingOrderCommercialSymbolColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property manufacturingOrderIndustrialSymbol() As String
            Get
                Try 
                    Return CType(Me(Me.tablemanufacturingorders.manufacturingOrderIndustrialSymbolColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'manufacturingOrderIndustrialSymbol' in table 'manufacturing"& _ 
                            "orders' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemanufacturingorders.manufacturingOrderIndustrialSymbolColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property manufacturingOrderQuantity() As UInteger
            Get
                Try 
                    Return CType(Me(Me.tablemanufacturingorders.manufacturingOrderQuantityColumn),UInteger)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'manufacturingOrderQuantity' in table 'manufacturingorders' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemanufacturingorders.manufacturingOrderQuantityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property manufacturingOrderDueDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tablemanufacturingorders.manufacturingOrderDueDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'manufacturingOrderDueDate' in table 'manufacturingorders' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemanufacturingorders.manufacturingOrderDueDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property manufacturingOrderScheduledDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tablemanufacturingorders.manufacturingOrderScheduledDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'manufacturingOrderScheduledDate' in table 'manufacturingord"& _ 
                            "ers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemanufacturingorders.manufacturingOrderScheduledDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsmanufacturingOrderCustomerOrderIdNull() As Boolean
            Return Me.IsNull(Me.tablemanufacturingorders.manufacturingOrderCustomerOrderIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetmanufacturingOrderCustomerOrderIdNull()
            Me(Me.tablemanufacturingorders.manufacturingOrderCustomerOrderIdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsmanufacturingOrderLabelNull() As Boolean
            Return Me.IsNull(Me.tablemanufacturingorders.manufacturingOrderLabelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetmanufacturingOrderLabelNull()
            Me(Me.tablemanufacturingorders.manufacturingOrderLabelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsmanufacturingOrderCommercialSymbolNull() As Boolean
            Return Me.IsNull(Me.tablemanufacturingorders.manufacturingOrderCommercialSymbolColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetmanufacturingOrderCommercialSymbolNull()
            Me(Me.tablemanufacturingorders.manufacturingOrderCommercialSymbolColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsmanufacturingOrderIndustrialSymbolNull() As Boolean
            Return Me.IsNull(Me.tablemanufacturingorders.manufacturingOrderIndustrialSymbolColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetmanufacturingOrderIndustrialSymbolNull()
            Me(Me.tablemanufacturingorders.manufacturingOrderIndustrialSymbolColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsmanufacturingOrderQuantityNull() As Boolean
            Return Me.IsNull(Me.tablemanufacturingorders.manufacturingOrderQuantityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetmanufacturingOrderQuantityNull()
            Me(Me.tablemanufacturingorders.manufacturingOrderQuantityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsmanufacturingOrderDueDateNull() As Boolean
            Return Me.IsNull(Me.tablemanufacturingorders.manufacturingOrderDueDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetmanufacturingOrderDueDateNull()
            Me(Me.tablemanufacturingorders.manufacturingOrderDueDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsmanufacturingOrderScheduledDateNull() As Boolean
            Return Me.IsNull(Me.tablemanufacturingorders.manufacturingOrderScheduledDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetmanufacturingOrderScheduledDateNull()
            Me(Me.tablemanufacturingorders.manufacturingOrderScheduledDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetworkordersRows() As workordersRow()
            If (Me.Table.ChildRelations("FK_workOrderManufacturingOrder") Is Nothing) Then
                Return New workordersRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_workOrderManufacturingOrder")),workordersRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class measurementresultsRow
        Inherits Global.System.Data.DataRow
        
        Private tablemeasurementresults As measurementresultsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablemeasurementresults = CType(Me.Table,measurementresultsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property measurementResultId() As String
            Get
                Return CType(Me(Me.tablemeasurementresults.measurementResultIdColumn),String)
            End Get
            Set
                Me(Me.tablemeasurementresults.measurementResultIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property measurementResultProduct() As String
            Get
                Try 
                    Return CType(Me(Me.tablemeasurementresults.measurementResultProductColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'measurementResultProduct' in table 'measurementresults' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemeasurementresults.measurementResultProductColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property measurementResultWorkOrder() As String
            Get
                Try 
                    Return CType(Me(Me.tablemeasurementresults.measurementResultWorkOrderColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'measurementResultWorkOrder' in table 'measurementresults' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemeasurementresults.measurementResultWorkOrderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property measurementResultDate() As Date
            Get
                Return CType(Me(Me.tablemeasurementresults.measurementResultDateColumn),Date)
            End Get
            Set
                Me(Me.tablemeasurementresults.measurementResultDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property measurementResultProductDefect() As UInteger
            Get
                Try 
                    Return CType(Me(Me.tablemeasurementresults.measurementResultProductDefectColumn),UInteger)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'measurementResultProductDefect' in table 'measurementresult"& _ 
                            "s' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemeasurementresults.measurementResultProductDefectColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property measurementResultName1() As String
            Get
                Return CType(Me(Me.tablemeasurementresults.measurementResultName1Column),String)
            End Get
            Set
                Me(Me.tablemeasurementresults.measurementResultName1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property measurementResultMeasure1() As Single
            Get
                Return CType(Me(Me.tablemeasurementresults.measurementResultMeasure1Column),Single)
            End Get
            Set
                Me(Me.tablemeasurementresults.measurementResultMeasure1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property measurementResultName2() As String
            Get
                Try 
                    Return CType(Me(Me.tablemeasurementresults.measurementResultName2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'measurementResultName2' in table 'measurementresults' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablemeasurementresults.measurementResultName2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property measurementResultMeasure2() As Single
            Get
                Try 
                    Return CType(Me(Me.tablemeasurementresults.measurementResultMeasure2Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'measurementResultMeasure2' in table 'measurementresults' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemeasurementresults.measurementResultMeasure2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property measurementResultName3() As String
            Get
                Try 
                    Return CType(Me(Me.tablemeasurementresults.measurementResultName3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'measurementResultName3' in table 'measurementresults' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablemeasurementresults.measurementResultName3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property measurementResultMeasure3() As Single
            Get
                Try 
                    Return CType(Me(Me.tablemeasurementresults.measurementResultMeasure3Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'measurementResultMeasure3' in table 'measurementresults' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemeasurementresults.measurementResultMeasure3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property measurementResultName4() As String
            Get
                Try 
                    Return CType(Me(Me.tablemeasurementresults.measurementResultName4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'measurementResultName4' in table 'measurementresults' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablemeasurementresults.measurementResultName4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property measurementResultMeasure4() As Single
            Get
                Try 
                    Return CType(Me(Me.tablemeasurementresults.measurementResultMeasure4Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'measurementResultMeasure4' in table 'measurementresults' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemeasurementresults.measurementResultMeasure4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property measurementResultName5() As String
            Get
                Try 
                    Return CType(Me(Me.tablemeasurementresults.measurementResultName5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'measurementResultName5' in table 'measurementresults' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablemeasurementresults.measurementResultName5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property measurementResultMeasure5() As Single
            Get
                Try 
                    Return CType(Me(Me.tablemeasurementresults.measurementResultMeasure5Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'measurementResultMeasure5' in table 'measurementresults' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemeasurementresults.measurementResultMeasure5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property measurementResultName6() As String
            Get
                Try 
                    Return CType(Me(Me.tablemeasurementresults.measurementResultName6Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'measurementResultName6' in table 'measurementresults' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablemeasurementresults.measurementResultName6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property measurementResultMeasure6() As Single
            Get
                Try 
                    Return CType(Me(Me.tablemeasurementresults.measurementResultMeasure6Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'measurementResultMeasure6' in table 'measurementresults' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemeasurementresults.measurementResultMeasure6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property measurementResultName7() As String
            Get
                Try 
                    Return CType(Me(Me.tablemeasurementresults.measurementResultName7Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'measurementResultName7' in table 'measurementresults' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablemeasurementresults.measurementResultName7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property measurementResultMeasure7() As Single
            Get
                Try 
                    Return CType(Me(Me.tablemeasurementresults.measurementResultMeasure7Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'measurementResultMeasure7' in table 'measurementresults' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemeasurementresults.measurementResultMeasure7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property measurementResultName8() As String
            Get
                Try 
                    Return CType(Me(Me.tablemeasurementresults.measurementResultName8Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'measurementResultName8' in table 'measurementresults' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablemeasurementresults.measurementResultName8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property measurementResultMeasure8() As Single
            Get
                Try 
                    Return CType(Me(Me.tablemeasurementresults.measurementResultMeasure8Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'measurementResultMeasure8' in table 'measurementresults' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemeasurementresults.measurementResultMeasure8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property measurementResultName9() As String
            Get
                Try 
                    Return CType(Me(Me.tablemeasurementresults.measurementResultName9Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'measurementResultName9' in table 'measurementresults' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablemeasurementresults.measurementResultName9Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property measurementResultMeasure9() As Single
            Get
                Try 
                    Return CType(Me(Me.tablemeasurementresults.measurementResultMeasure9Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'measurementResultMeasure9' in table 'measurementresults' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemeasurementresults.measurementResultMeasure9Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property measurementResultName10() As String
            Get
                Try 
                    Return CType(Me(Me.tablemeasurementresults.measurementResultName10Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'measurementResultName10' in table 'measurementresults' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemeasurementresults.measurementResultName10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property measurementResultMeasure10() As Single
            Get
                Try 
                    Return CType(Me(Me.tablemeasurementresults.measurementResultMeasure10Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'measurementResultMeasure10' in table 'measurementresults' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemeasurementresults.measurementResultMeasure10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property measurementResultName11() As String
            Get
                Try 
                    Return CType(Me(Me.tablemeasurementresults.measurementResultName11Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'measurementResultName11' in table 'measurementresults' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemeasurementresults.measurementResultName11Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property measurementResultMeasure11() As Single
            Get
                Try 
                    Return CType(Me(Me.tablemeasurementresults.measurementResultMeasure11Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'measurementResultMeasure11' in table 'measurementresults' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemeasurementresults.measurementResultMeasure11Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property measurementResultName12() As String
            Get
                Try 
                    Return CType(Me(Me.tablemeasurementresults.measurementResultName12Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'measurementResultName12' in table 'measurementresults' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemeasurementresults.measurementResultName12Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property measurementResultMeasure12() As Single
            Get
                Try 
                    Return CType(Me(Me.tablemeasurementresults.measurementResultMeasure12Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'measurementResultMeasure12' in table 'measurementresults' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemeasurementresults.measurementResultMeasure12Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property measurementResultName13() As String
            Get
                Try 
                    Return CType(Me(Me.tablemeasurementresults.measurementResultName13Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'measurementResultName13' in table 'measurementresults' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemeasurementresults.measurementResultName13Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property measurementResultMeasure13() As Single
            Get
                Try 
                    Return CType(Me(Me.tablemeasurementresults.measurementResultMeasure13Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'measurementResultMeasure13' in table 'measurementresults' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemeasurementresults.measurementResultMeasure13Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property measurementResultName14() As String
            Get
                Try 
                    Return CType(Me(Me.tablemeasurementresults.measurementResultName14Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'measurementResultName14' in table 'measurementresults' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemeasurementresults.measurementResultName14Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property measurementResultMeasure14() As Single
            Get
                Try 
                    Return CType(Me(Me.tablemeasurementresults.measurementResultMeasure14Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'measurementResultMeasure14' in table 'measurementresults' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemeasurementresults.measurementResultMeasure14Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property measurementResultName15() As String
            Get
                Try 
                    Return CType(Me(Me.tablemeasurementresults.measurementResultName15Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'measurementResultName15' in table 'measurementresults' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemeasurementresults.measurementResultName15Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property measurementResultMeasure15() As Single
            Get
                Try 
                    Return CType(Me(Me.tablemeasurementresults.measurementResultMeasure15Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'measurementResultMeasure15' in table 'measurementresults' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemeasurementresults.measurementResultMeasure15Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property measurementResultName16() As String
            Get
                Try 
                    Return CType(Me(Me.tablemeasurementresults.measurementResultName16Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'measurementResultName16' in table 'measurementresults' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemeasurementresults.measurementResultName16Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property measurementResultMeasure16() As Single
            Get
                Try 
                    Return CType(Me(Me.tablemeasurementresults.measurementResultMeasure16Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'measurementResultMeasure16' in table 'measurementresults' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemeasurementresults.measurementResultMeasure16Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property measurementResultName17() As String
            Get
                Try 
                    Return CType(Me(Me.tablemeasurementresults.measurementResultName17Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'measurementResultName17' in table 'measurementresults' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemeasurementresults.measurementResultName17Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property measurementResultMeasure17() As Single
            Get
                Try 
                    Return CType(Me(Me.tablemeasurementresults.measurementResultMeasure17Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'measurementResultMeasure17' in table 'measurementresults' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemeasurementresults.measurementResultMeasure17Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property measurementResultName18() As String
            Get
                Try 
                    Return CType(Me(Me.tablemeasurementresults.measurementResultName18Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'measurementResultName18' in table 'measurementresults' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemeasurementresults.measurementResultName18Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property measurementResultMeasure18() As Single
            Get
                Try 
                    Return CType(Me(Me.tablemeasurementresults.measurementResultMeasure18Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'measurementResultMeasure18' in table 'measurementresults' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemeasurementresults.measurementResultMeasure18Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property measurementResultName19() As String
            Get
                Try 
                    Return CType(Me(Me.tablemeasurementresults.measurementResultName19Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'measurementResultName19' in table 'measurementresults' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemeasurementresults.measurementResultName19Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property measurementResultMeasure19() As Single
            Get
                Try 
                    Return CType(Me(Me.tablemeasurementresults.measurementResultMeasure19Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'measurementResultMeasure19' in table 'measurementresults' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemeasurementresults.measurementResultMeasure19Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property measurementResultName20() As String
            Get
                Try 
                    Return CType(Me(Me.tablemeasurementresults.measurementResultName20Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'measurementResultName20' in table 'measurementresults' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemeasurementresults.measurementResultName20Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property measurementResultMeasure20() As Single
            Get
                Try 
                    Return CType(Me(Me.tablemeasurementresults.measurementResultMeasure20Column),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'measurementResultMeasure20' in table 'measurementresults' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemeasurementresults.measurementResultMeasure20Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsmeasurementResultProductNull() As Boolean
            Return Me.IsNull(Me.tablemeasurementresults.measurementResultProductColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetmeasurementResultProductNull()
            Me(Me.tablemeasurementresults.measurementResultProductColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsmeasurementResultWorkOrderNull() As Boolean
            Return Me.IsNull(Me.tablemeasurementresults.measurementResultWorkOrderColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetmeasurementResultWorkOrderNull()
            Me(Me.tablemeasurementresults.measurementResultWorkOrderColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsmeasurementResultProductDefectNull() As Boolean
            Return Me.IsNull(Me.tablemeasurementresults.measurementResultProductDefectColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetmeasurementResultProductDefectNull()
            Me(Me.tablemeasurementresults.measurementResultProductDefectColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsmeasurementResultName2Null() As Boolean
            Return Me.IsNull(Me.tablemeasurementresults.measurementResultName2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetmeasurementResultName2Null()
            Me(Me.tablemeasurementresults.measurementResultName2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsmeasurementResultMeasure2Null() As Boolean
            Return Me.IsNull(Me.tablemeasurementresults.measurementResultMeasure2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetmeasurementResultMeasure2Null()
            Me(Me.tablemeasurementresults.measurementResultMeasure2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsmeasurementResultName3Null() As Boolean
            Return Me.IsNull(Me.tablemeasurementresults.measurementResultName3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetmeasurementResultName3Null()
            Me(Me.tablemeasurementresults.measurementResultName3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsmeasurementResultMeasure3Null() As Boolean
            Return Me.IsNull(Me.tablemeasurementresults.measurementResultMeasure3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetmeasurementResultMeasure3Null()
            Me(Me.tablemeasurementresults.measurementResultMeasure3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsmeasurementResultName4Null() As Boolean
            Return Me.IsNull(Me.tablemeasurementresults.measurementResultName4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetmeasurementResultName4Null()
            Me(Me.tablemeasurementresults.measurementResultName4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsmeasurementResultMeasure4Null() As Boolean
            Return Me.IsNull(Me.tablemeasurementresults.measurementResultMeasure4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetmeasurementResultMeasure4Null()
            Me(Me.tablemeasurementresults.measurementResultMeasure4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsmeasurementResultName5Null() As Boolean
            Return Me.IsNull(Me.tablemeasurementresults.measurementResultName5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetmeasurementResultName5Null()
            Me(Me.tablemeasurementresults.measurementResultName5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsmeasurementResultMeasure5Null() As Boolean
            Return Me.IsNull(Me.tablemeasurementresults.measurementResultMeasure5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetmeasurementResultMeasure5Null()
            Me(Me.tablemeasurementresults.measurementResultMeasure5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsmeasurementResultName6Null() As Boolean
            Return Me.IsNull(Me.tablemeasurementresults.measurementResultName6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetmeasurementResultName6Null()
            Me(Me.tablemeasurementresults.measurementResultName6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsmeasurementResultMeasure6Null() As Boolean
            Return Me.IsNull(Me.tablemeasurementresults.measurementResultMeasure6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetmeasurementResultMeasure6Null()
            Me(Me.tablemeasurementresults.measurementResultMeasure6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsmeasurementResultName7Null() As Boolean
            Return Me.IsNull(Me.tablemeasurementresults.measurementResultName7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetmeasurementResultName7Null()
            Me(Me.tablemeasurementresults.measurementResultName7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsmeasurementResultMeasure7Null() As Boolean
            Return Me.IsNull(Me.tablemeasurementresults.measurementResultMeasure7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetmeasurementResultMeasure7Null()
            Me(Me.tablemeasurementresults.measurementResultMeasure7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsmeasurementResultName8Null() As Boolean
            Return Me.IsNull(Me.tablemeasurementresults.measurementResultName8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetmeasurementResultName8Null()
            Me(Me.tablemeasurementresults.measurementResultName8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsmeasurementResultMeasure8Null() As Boolean
            Return Me.IsNull(Me.tablemeasurementresults.measurementResultMeasure8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetmeasurementResultMeasure8Null()
            Me(Me.tablemeasurementresults.measurementResultMeasure8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsmeasurementResultName9Null() As Boolean
            Return Me.IsNull(Me.tablemeasurementresults.measurementResultName9Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetmeasurementResultName9Null()
            Me(Me.tablemeasurementresults.measurementResultName9Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsmeasurementResultMeasure9Null() As Boolean
            Return Me.IsNull(Me.tablemeasurementresults.measurementResultMeasure9Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetmeasurementResultMeasure9Null()
            Me(Me.tablemeasurementresults.measurementResultMeasure9Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsmeasurementResultName10Null() As Boolean
            Return Me.IsNull(Me.tablemeasurementresults.measurementResultName10Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetmeasurementResultName10Null()
            Me(Me.tablemeasurementresults.measurementResultName10Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsmeasurementResultMeasure10Null() As Boolean
            Return Me.IsNull(Me.tablemeasurementresults.measurementResultMeasure10Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetmeasurementResultMeasure10Null()
            Me(Me.tablemeasurementresults.measurementResultMeasure10Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsmeasurementResultName11Null() As Boolean
            Return Me.IsNull(Me.tablemeasurementresults.measurementResultName11Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetmeasurementResultName11Null()
            Me(Me.tablemeasurementresults.measurementResultName11Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsmeasurementResultMeasure11Null() As Boolean
            Return Me.IsNull(Me.tablemeasurementresults.measurementResultMeasure11Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetmeasurementResultMeasure11Null()
            Me(Me.tablemeasurementresults.measurementResultMeasure11Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsmeasurementResultName12Null() As Boolean
            Return Me.IsNull(Me.tablemeasurementresults.measurementResultName12Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetmeasurementResultName12Null()
            Me(Me.tablemeasurementresults.measurementResultName12Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsmeasurementResultMeasure12Null() As Boolean
            Return Me.IsNull(Me.tablemeasurementresults.measurementResultMeasure12Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetmeasurementResultMeasure12Null()
            Me(Me.tablemeasurementresults.measurementResultMeasure12Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsmeasurementResultName13Null() As Boolean
            Return Me.IsNull(Me.tablemeasurementresults.measurementResultName13Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetmeasurementResultName13Null()
            Me(Me.tablemeasurementresults.measurementResultName13Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsmeasurementResultMeasure13Null() As Boolean
            Return Me.IsNull(Me.tablemeasurementresults.measurementResultMeasure13Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetmeasurementResultMeasure13Null()
            Me(Me.tablemeasurementresults.measurementResultMeasure13Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsmeasurementResultName14Null() As Boolean
            Return Me.IsNull(Me.tablemeasurementresults.measurementResultName14Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetmeasurementResultName14Null()
            Me(Me.tablemeasurementresults.measurementResultName14Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsmeasurementResultMeasure14Null() As Boolean
            Return Me.IsNull(Me.tablemeasurementresults.measurementResultMeasure14Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetmeasurementResultMeasure14Null()
            Me(Me.tablemeasurementresults.measurementResultMeasure14Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsmeasurementResultName15Null() As Boolean
            Return Me.IsNull(Me.tablemeasurementresults.measurementResultName15Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetmeasurementResultName15Null()
            Me(Me.tablemeasurementresults.measurementResultName15Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsmeasurementResultMeasure15Null() As Boolean
            Return Me.IsNull(Me.tablemeasurementresults.measurementResultMeasure15Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetmeasurementResultMeasure15Null()
            Me(Me.tablemeasurementresults.measurementResultMeasure15Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsmeasurementResultName16Null() As Boolean
            Return Me.IsNull(Me.tablemeasurementresults.measurementResultName16Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetmeasurementResultName16Null()
            Me(Me.tablemeasurementresults.measurementResultName16Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsmeasurementResultMeasure16Null() As Boolean
            Return Me.IsNull(Me.tablemeasurementresults.measurementResultMeasure16Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetmeasurementResultMeasure16Null()
            Me(Me.tablemeasurementresults.measurementResultMeasure16Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsmeasurementResultName17Null() As Boolean
            Return Me.IsNull(Me.tablemeasurementresults.measurementResultName17Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetmeasurementResultName17Null()
            Me(Me.tablemeasurementresults.measurementResultName17Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsmeasurementResultMeasure17Null() As Boolean
            Return Me.IsNull(Me.tablemeasurementresults.measurementResultMeasure17Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetmeasurementResultMeasure17Null()
            Me(Me.tablemeasurementresults.measurementResultMeasure17Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsmeasurementResultName18Null() As Boolean
            Return Me.IsNull(Me.tablemeasurementresults.measurementResultName18Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetmeasurementResultName18Null()
            Me(Me.tablemeasurementresults.measurementResultName18Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsmeasurementResultMeasure18Null() As Boolean
            Return Me.IsNull(Me.tablemeasurementresults.measurementResultMeasure18Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetmeasurementResultMeasure18Null()
            Me(Me.tablemeasurementresults.measurementResultMeasure18Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsmeasurementResultName19Null() As Boolean
            Return Me.IsNull(Me.tablemeasurementresults.measurementResultName19Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetmeasurementResultName19Null()
            Me(Me.tablemeasurementresults.measurementResultName19Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsmeasurementResultMeasure19Null() As Boolean
            Return Me.IsNull(Me.tablemeasurementresults.measurementResultMeasure19Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetmeasurementResultMeasure19Null()
            Me(Me.tablemeasurementresults.measurementResultMeasure19Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsmeasurementResultName20Null() As Boolean
            Return Me.IsNull(Me.tablemeasurementresults.measurementResultName20Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetmeasurementResultName20Null()
            Me(Me.tablemeasurementresults.measurementResultName20Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsmeasurementResultMeasure20Null() As Boolean
            Return Me.IsNull(Me.tablemeasurementresults.measurementResultMeasure20Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetmeasurementResultMeasure20Null()
            Me(Me.tablemeasurementresults.measurementResultMeasure20Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class productdefectcodesRow
        Inherits Global.System.Data.DataRow
        
        Private tableproductdefectcodes As productdefectcodesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableproductdefectcodes = CType(Me.Table,productdefectcodesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property productDefectCode() As UInteger
            Get
                Return CType(Me(Me.tableproductdefectcodes.productDefectCodeColumn),UInteger)
            End Get
            Set
                Me(Me.tableproductdefectcodes.productDefectCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property productDefectText() As String
            Get
                Try 
                    Return CType(Me(Me.tableproductdefectcodes.productDefectTextColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'productDefectText' in table 'productdefectcodes' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableproductdefectcodes.productDefectTextColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsproductDefectTextNull() As Boolean
            Return Me.IsNull(Me.tableproductdefectcodes.productDefectTextColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetproductDefectTextNull()
            Me(Me.tableproductdefectcodes.productDefectTextColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class workordersRow
        Inherits Global.System.Data.DataRow
        
        Private tableworkorders As workordersDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableworkorders = CType(Me.Table,workordersDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property workOrderId() As String
            Get
                Return CType(Me(Me.tableworkorders.workOrderIdColumn),String)
            End Get
            Set
                Me(Me.tableworkorders.workOrderIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property workOrderManufacturingOrder() As String
            Get
                Return CType(Me(Me.tableworkorders.workOrderManufacturingOrderColumn),String)
            End Get
            Set
                Me(Me.tableworkorders.workOrderManufacturingOrderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property workOrderEquipment() As UInteger
            Get
                Return CType(Me(Me.tableworkorders.workOrderEquipmentColumn),UInteger)
            End Get
            Set
                Me(Me.tableworkorders.workOrderEquipmentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property workOrderPhase() As UInteger
            Get
                Try 
                    Return CType(Me(Me.tableworkorders.workOrderPhaseColumn),UInteger)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'workOrderPhase' in table 'workorders' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableworkorders.workOrderPhaseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property workOrderDuration() As ULong
            Get
                Try 
                    Return CType(Me(Me.tableworkorders.workOrderDurationColumn),ULong)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'workOrderDuration' in table 'workorders' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableworkorders.workOrderDurationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property workOrderBeginDate() As Date
            Get
                Return CType(Me(Me.tableworkorders.workOrderBeginDateColumn),Date)
            End Get
            Set
                Me(Me.tableworkorders.workOrderBeginDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property workOrderEndDate() As Date
            Get
                Return CType(Me(Me.tableworkorders.workOrderEndDateColumn),Date)
            End Get
            Set
                Me(Me.tableworkorders.workOrderEndDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property workOrderProcessedQuantity() As UInteger
            Get
                Try 
                    Return CType(Me(Me.tableworkorders.workOrderProcessedQuantityColumn),UInteger)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'workOrderProcessedQuantity' in table 'workorders' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableworkorders.workOrderProcessedQuantityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property workOrderQuantityOk() As UInteger
            Get
                Try 
                    Return CType(Me(Me.tableworkorders.workOrderQuantityOkColumn),UInteger)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'workOrderQuantityOk' in table 'workorders' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableworkorders.workOrderQuantityOkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property workOrderQuantityNok() As UInteger
            Get
                Try 
                    Return CType(Me(Me.tableworkorders.workOrderQuantityNokColumn),UInteger)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'workOrderQuantityNok' in table 'workorders' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableworkorders.workOrderQuantityNokColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property workOrderPreviousWorkOrder() As UInteger
            Get
                Try 
                    Return CType(Me(Me.tableworkorders.workOrderPreviousWorkOrderColumn),UInteger)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'workOrderPreviousWorkOrder' in table 'workorders' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableworkorders.workOrderPreviousWorkOrderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property equipmentsRow() As equipmentsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_workOrderEquipment")),equipmentsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_workOrderEquipment"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property manufacturingordersRow() As manufacturingordersRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_workOrderManufacturingOrder")),manufacturingordersRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_workOrderManufacturingOrder"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsworkOrderPhaseNull() As Boolean
            Return Me.IsNull(Me.tableworkorders.workOrderPhaseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetworkOrderPhaseNull()
            Me(Me.tableworkorders.workOrderPhaseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsworkOrderDurationNull() As Boolean
            Return Me.IsNull(Me.tableworkorders.workOrderDurationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetworkOrderDurationNull()
            Me(Me.tableworkorders.workOrderDurationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsworkOrderProcessedQuantityNull() As Boolean
            Return Me.IsNull(Me.tableworkorders.workOrderProcessedQuantityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetworkOrderProcessedQuantityNull()
            Me(Me.tableworkorders.workOrderProcessedQuantityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsworkOrderQuantityOkNull() As Boolean
            Return Me.IsNull(Me.tableworkorders.workOrderQuantityOkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetworkOrderQuantityOkNull()
            Me(Me.tableworkorders.workOrderQuantityOkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsworkOrderQuantityNokNull() As Boolean
            Return Me.IsNull(Me.tableworkorders.workOrderQuantityNokColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetworkOrderQuantityNokNull()
            Me(Me.tableworkorders.workOrderQuantityNokColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsworkOrderPreviousWorkOrderNull() As Boolean
            Return Me.IsNull(Me.tableworkorders.workOrderPreviousWorkOrderColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetworkOrderPreviousWorkOrderNull()
            Me(Me.tableworkorders.workOrderPreviousWorkOrderColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class equipmentsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As equipmentsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As equipmentsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As equipmentsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class hazardeventsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As hazardeventsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As hazardeventsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As hazardeventsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class manufacturingordersRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As manufacturingordersRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As manufacturingordersRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As manufacturingordersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class measurementresultsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As measurementresultsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As measurementresultsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As measurementresultsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class productdefectcodesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As productdefectcodesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As productdefectcodesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As productdefectcodesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class workordersRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As workordersRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As workordersRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As workordersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace dataacquisitionDataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class equipmentsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "equipments"
            tableMapping.ColumnMappings.Add("equipmentId", "equipmentId")
            tableMapping.ColumnMappings.Add("equipmentLabel", "equipmentLabel")
            tableMapping.ColumnMappings.Add("equipmentProductionLine", "equipmentProductionLine")
            tableMapping.ColumnMappings.Add("equipmentDescription", "equipmentDescription")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `equipments` WHERE ((`equipmentId` = @Original_equipmentId) AND (`equ"& _ 
                "ipmentLabel` = @Original_equipmentLabel) AND ((@IsNull_equipmentProductionLine ="& _ 
                " 1 AND `equipmentProductionLine` IS NULL) OR (`equipmentProductionLine` = @Origi"& _ 
                "nal_equipmentProductionLine)) AND ((@IsNull_equipmentDescription = 1 AND `equipm"& _ 
                "entDescription` IS NULL) OR (`equipmentDescription` = @Original_equipmentDescrip"& _ 
                "tion)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_equipmentId"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "equipmentId"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_equipmentLabel"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "equipmentLabel"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_equipmentProductionLine"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "equipmentProductionLine"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_equipmentProductionLine"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "equipmentProductionLine"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_equipmentDescription"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "equipmentDescription"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_equipmentDescription"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "equipmentDescription"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `equipments` (`equipmentLabel`, `equipmentProductionLine`, `equipment"& _ 
                "Description`) VALUES (@equipmentLabel, @equipmentProductionLine, @equipmentDescr"& _ 
                "iption)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@equipmentLabel"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "equipmentLabel"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@equipmentProductionLine"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "equipmentProductionLine"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@equipmentDescription"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "equipmentDescription"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `equipments` SET `equipmentLabel` = @equipmentLabel, `equipmentProductionL"& _ 
                "ine` = @equipmentProductionLine, `equipmentDescription` = @equipmentDescription "& _ 
                "WHERE ((`equipmentId` = @Original_equipmentId) AND (`equipmentLabel` = @Original"& _ 
                "_equipmentLabel) AND ((@IsNull_equipmentProductionLine = 1 AND `equipmentProduct"& _ 
                "ionLine` IS NULL) OR (`equipmentProductionLine` = @Original_equipmentProductionL"& _ 
                "ine)) AND ((@IsNull_equipmentDescription = 1 AND `equipmentDescription` IS NULL)"& _ 
                " OR (`equipmentDescription` = @Original_equipmentDescription)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@equipmentLabel"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "equipmentLabel"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@equipmentProductionLine"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "equipmentProductionLine"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@equipmentDescription"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "equipmentDescription"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_equipmentId"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "equipmentId"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_equipmentLabel"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "equipmentLabel"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_equipmentProductionLine"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "equipmentProductionLine"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_equipmentProductionLine"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "equipmentProductionLine"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_equipmentDescription"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "equipmentDescription"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_equipmentDescription"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "equipmentDescription"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection()
            Me._connection.ConnectionString = Global.XS156LinearTesterPole.My.MySettings.Default.XS156dataacquisitionConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT `equipmentId`, `equipmentLabel`, `equipmentProductionLine`, `equipmentDesc"& _ 
                "ription` FROM `equipments`"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dataacquisitionDataSet.equipmentsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dataacquisitionDataSet.equipmentsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dataacquisitionDataSet.equipmentsDataTable = New dataacquisitionDataSet.equipmentsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dataacquisitionDataSet.equipmentsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dataacquisitionDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "equipments")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_equipmentId As UInteger, ByVal Original_equipmentLabel As String, ByVal Original_equipmentProductionLine As String, ByVal Original_equipmentDescription As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_equipmentId,UInteger)
            If (Original_equipmentLabel Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_equipmentLabel")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_equipmentLabel,String)
            End If
            If (Original_equipmentProductionLine Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_equipmentProductionLine,String)
            End If
            If (Original_equipmentDescription Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_equipmentDescription,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal equipmentLabel As String, ByVal equipmentProductionLine As String, ByVal equipmentDescription As String) As Integer
            If (equipmentLabel Is Nothing) Then
                Throw New Global.System.ArgumentNullException("equipmentLabel")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(equipmentLabel,String)
            End If
            If (equipmentProductionLine Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(equipmentProductionLine,String)
            End If
            If (equipmentDescription Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(equipmentDescription,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal equipmentLabel As String, ByVal equipmentProductionLine As String, ByVal equipmentDescription As String, ByVal Original_equipmentId As UInteger, ByVal Original_equipmentLabel As String, ByVal Original_equipmentProductionLine As String, ByVal Original_equipmentDescription As String) As Integer
            If (equipmentLabel Is Nothing) Then
                Throw New Global.System.ArgumentNullException("equipmentLabel")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(equipmentLabel,String)
            End If
            If (equipmentProductionLine Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(equipmentProductionLine,String)
            End If
            If (equipmentDescription Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(equipmentDescription,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_equipmentId,UInteger)
            If (Original_equipmentLabel Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_equipmentLabel")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_equipmentLabel,String)
            End If
            If (Original_equipmentProductionLine Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_equipmentProductionLine,String)
            End If
            If (Original_equipmentDescription Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_equipmentDescription,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class hazardeventsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "hazardevents"
            tableMapping.ColumnMappings.Add("HazardEventId", "HazardEventId")
            tableMapping.ColumnMappings.Add("HazardEventLabel", "HazardEventLabel")
            tableMapping.ColumnMappings.Add("HazardEventGravity", "HazardEventGravity")
            tableMapping.ColumnMappings.Add("HazardEventEquipment", "HazardEventEquipment")
            tableMapping.ColumnMappings.Add("HazardEventWorkOrder", "HazardEventWorkOrder")
            tableMapping.ColumnMappings.Add("HazardEventBeginDate", "HazardEventBeginDate")
            tableMapping.ColumnMappings.Add("HazardEventEndDate", "HazardEventEndDate")
            tableMapping.ColumnMappings.Add("HazardEventDuration", "HazardEventDuration")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `hazardevents` WHERE ((`HazardEventId` = @Original_HazardEventId) AND"& _ 
                " (`HazardEventLabel` = @Original_HazardEventLabel) AND (`HazardEventGravity` = @"& _ 
                "Original_HazardEventGravity) AND (`HazardEventEquipment` = @Original_HazardEvent"& _ 
                "Equipment) AND (`HazardEventWorkOrder` = @Original_HazardEventWorkOrder) AND (`H"& _ 
                "azardEventBeginDate` = @Original_HazardEventBeginDate) AND (`HazardEventEndDate`"& _ 
                " = @Original_HazardEventEndDate) AND (`HazardEventDuration` = @Original_HazardEv"& _ 
                "entDuration))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_HazardEventId"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "HazardEventId"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_HazardEventLabel"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "HazardEventLabel"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_HazardEventGravity"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "HazardEventGravity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_HazardEventEquipment"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "HazardEventEquipment"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_HazardEventWorkOrder"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "HazardEventWorkOrder"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_HazardEventBeginDate"
            param.DbType = Global.System.Data.DbType.DateTime
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "HazardEventBeginDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_HazardEventEndDate"
            param.DbType = Global.System.Data.DbType.DateTime
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "HazardEventEndDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_HazardEventDuration"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "HazardEventDuration"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `hazardevents` (`HazardEventId`, `HazardEventLabel`, `HazardEventGrav"& _ 
                "ity`, `HazardEventEquipment`, `HazardEventWorkOrder`, `HazardEventBeginDate`, `H"& _ 
                "azardEventEndDate`, `HazardEventDuration`) VALUES (@HazardEventId, @HazardEventL"& _ 
                "abel, @HazardEventGravity, @HazardEventEquipment, @HazardEventWorkOrder, @Hazard"& _ 
                "EventBeginDate, @HazardEventEndDate, @HazardEventDuration)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@HazardEventId"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "HazardEventId"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@HazardEventLabel"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "HazardEventLabel"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@HazardEventGravity"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "HazardEventGravity"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@HazardEventEquipment"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "HazardEventEquipment"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@HazardEventWorkOrder"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "HazardEventWorkOrder"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@HazardEventBeginDate"
            param.DbType = Global.System.Data.DbType.DateTime
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "HazardEventBeginDate"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@HazardEventEndDate"
            param.DbType = Global.System.Data.DbType.DateTime
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "HazardEventEndDate"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@HazardEventDuration"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "HazardEventDuration"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `hazardevents` SET `HazardEventId` = @HazardEventId, `HazardEventLabel` = "& _ 
                "@HazardEventLabel, `HazardEventGravity` = @HazardEventGravity, `HazardEventEquip"& _ 
                "ment` = @HazardEventEquipment, `HazardEventWorkOrder` = @HazardEventWorkOrder, `"& _ 
                "HazardEventBeginDate` = @HazardEventBeginDate, `HazardEventEndDate` = @HazardEve"& _ 
                "ntEndDate, `HazardEventDuration` = @HazardEventDuration WHERE ((`HazardEventId` "& _ 
                "= @Original_HazardEventId) AND (`HazardEventLabel` = @Original_HazardEventLabel)"& _ 
                " AND (`HazardEventGravity` = @Original_HazardEventGravity) AND (`HazardEventEqui"& _ 
                "pment` = @Original_HazardEventEquipment) AND (`HazardEventWorkOrder` = @Original"& _ 
                "_HazardEventWorkOrder) AND (`HazardEventBeginDate` = @Original_HazardEventBeginD"& _ 
                "ate) AND (`HazardEventEndDate` = @Original_HazardEventEndDate) AND (`HazardEvent"& _ 
                "Duration` = @Original_HazardEventDuration))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@HazardEventId"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "HazardEventId"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@HazardEventLabel"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "HazardEventLabel"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@HazardEventGravity"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "HazardEventGravity"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@HazardEventEquipment"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "HazardEventEquipment"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@HazardEventWorkOrder"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "HazardEventWorkOrder"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@HazardEventBeginDate"
            param.DbType = Global.System.Data.DbType.DateTime
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "HazardEventBeginDate"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@HazardEventEndDate"
            param.DbType = Global.System.Data.DbType.DateTime
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "HazardEventEndDate"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@HazardEventDuration"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "HazardEventDuration"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_HazardEventId"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "HazardEventId"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_HazardEventLabel"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "HazardEventLabel"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_HazardEventGravity"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "HazardEventGravity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_HazardEventEquipment"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "HazardEventEquipment"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_HazardEventWorkOrder"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "HazardEventWorkOrder"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_HazardEventBeginDate"
            param.DbType = Global.System.Data.DbType.DateTime
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "HazardEventBeginDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_HazardEventEndDate"
            param.DbType = Global.System.Data.DbType.DateTime
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "HazardEventEndDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_HazardEventDuration"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "HazardEventDuration"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection()
            Me._connection.ConnectionString = Global.XS156LinearTesterPole.My.MySettings.Default.XS156dataacquisitionConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT `HazardEventId`, `HazardEventLabel`, `HazardEventGravity`, `HazardEventEqu"& _ 
                "ipment`, `HazardEventWorkOrder`, `HazardEventBeginDate`, `HazardEventEndDate`, `"& _ 
                "HazardEventDuration` FROM `hazardevents`"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dataacquisitionDataSet.hazardeventsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dataacquisitionDataSet.hazardeventsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dataacquisitionDataSet.hazardeventsDataTable = New dataacquisitionDataSet.hazardeventsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dataacquisitionDataSet.hazardeventsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dataacquisitionDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "hazardevents")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_HazardEventId As String, ByVal Original_HazardEventLabel As String, ByVal Original_HazardEventGravity As String, ByVal Original_HazardEventEquipment As UInteger, ByVal Original_HazardEventWorkOrder As String, ByVal Original_HazardEventBeginDate As Date, ByVal Original_HazardEventEndDate As Date, ByVal Original_HazardEventDuration As UInteger) As Integer
            If (Original_HazardEventId Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_HazardEventId")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_HazardEventId,String)
            End If
            If (Original_HazardEventLabel Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_HazardEventLabel")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_HazardEventLabel,String)
            End If
            If (Original_HazardEventGravity Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_HazardEventGravity")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_HazardEventGravity,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_HazardEventEquipment,UInteger)
            If (Original_HazardEventWorkOrder Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_HazardEventWorkOrder")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_HazardEventWorkOrder,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_HazardEventBeginDate,Date)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_HazardEventEndDate,Date)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_HazardEventDuration,UInteger)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal HazardEventId As String, ByVal HazardEventLabel As String, ByVal HazardEventGravity As String, ByVal HazardEventEquipment As UInteger, ByVal HazardEventWorkOrder As String, ByVal HazardEventBeginDate As Date, ByVal HazardEventEndDate As Date, ByVal HazardEventDuration As UInteger) As Integer
            If (HazardEventId Is Nothing) Then
                Throw New Global.System.ArgumentNullException("HazardEventId")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(HazardEventId,String)
            End If
            If (HazardEventLabel Is Nothing) Then
                Throw New Global.System.ArgumentNullException("HazardEventLabel")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(HazardEventLabel,String)
            End If
            If (HazardEventGravity Is Nothing) Then
                Throw New Global.System.ArgumentNullException("HazardEventGravity")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(HazardEventGravity,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(HazardEventEquipment,UInteger)
            If (HazardEventWorkOrder Is Nothing) Then
                Throw New Global.System.ArgumentNullException("HazardEventWorkOrder")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(HazardEventWorkOrder,String)
            End If
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(HazardEventBeginDate,Date)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(HazardEventEndDate,Date)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(HazardEventDuration,UInteger)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal HazardEventId As String,  _
                    ByVal HazardEventLabel As String,  _
                    ByVal HazardEventGravity As String,  _
                    ByVal HazardEventEquipment As UInteger,  _
                    ByVal HazardEventWorkOrder As String,  _
                    ByVal HazardEventBeginDate As Date,  _
                    ByVal HazardEventEndDate As Date,  _
                    ByVal HazardEventDuration As UInteger,  _
                    ByVal Original_HazardEventId As String,  _
                    ByVal Original_HazardEventLabel As String,  _
                    ByVal Original_HazardEventGravity As String,  _
                    ByVal Original_HazardEventEquipment As UInteger,  _
                    ByVal Original_HazardEventWorkOrder As String,  _
                    ByVal Original_HazardEventBeginDate As Date,  _
                    ByVal Original_HazardEventEndDate As Date,  _
                    ByVal Original_HazardEventDuration As UInteger) As Integer
            If (HazardEventId Is Nothing) Then
                Throw New Global.System.ArgumentNullException("HazardEventId")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(HazardEventId,String)
            End If
            If (HazardEventLabel Is Nothing) Then
                Throw New Global.System.ArgumentNullException("HazardEventLabel")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(HazardEventLabel,String)
            End If
            If (HazardEventGravity Is Nothing) Then
                Throw New Global.System.ArgumentNullException("HazardEventGravity")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(HazardEventGravity,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(HazardEventEquipment,UInteger)
            If (HazardEventWorkOrder Is Nothing) Then
                Throw New Global.System.ArgumentNullException("HazardEventWorkOrder")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(HazardEventWorkOrder,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(HazardEventBeginDate,Date)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(HazardEventEndDate,Date)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(HazardEventDuration,UInteger)
            If (Original_HazardEventId Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_HazardEventId")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_HazardEventId,String)
            End If
            If (Original_HazardEventLabel Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_HazardEventLabel")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_HazardEventLabel,String)
            End If
            If (Original_HazardEventGravity Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_HazardEventGravity")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_HazardEventGravity,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_HazardEventEquipment,UInteger)
            If (Original_HazardEventWorkOrder Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_HazardEventWorkOrder")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_HazardEventWorkOrder,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_HazardEventBeginDate,Date)
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_HazardEventEndDate,Date)
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_HazardEventDuration,UInteger)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal HazardEventLabel As String, ByVal HazardEventGravity As String, ByVal HazardEventEquipment As UInteger, ByVal HazardEventWorkOrder As String, ByVal HazardEventBeginDate As Date, ByVal HazardEventEndDate As Date, ByVal HazardEventDuration As UInteger, ByVal Original_HazardEventId As String, ByVal Original_HazardEventLabel As String, ByVal Original_HazardEventGravity As String, ByVal Original_HazardEventEquipment As UInteger, ByVal Original_HazardEventWorkOrder As String, ByVal Original_HazardEventBeginDate As Date, ByVal Original_HazardEventEndDate As Date, ByVal Original_HazardEventDuration As UInteger) As Integer
            Return Me.Update(Original_HazardEventId, HazardEventLabel, HazardEventGravity, HazardEventEquipment, HazardEventWorkOrder, HazardEventBeginDate, HazardEventEndDate, HazardEventDuration, Original_HazardEventId, Original_HazardEventLabel, Original_HazardEventGravity, Original_HazardEventEquipment, Original_HazardEventWorkOrder, Original_HazardEventBeginDate, Original_HazardEventEndDate, Original_HazardEventDuration)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class manufacturingordersTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "manufacturingorders"
            tableMapping.ColumnMappings.Add("manufacturingOrderId", "manufacturingOrderId")
            tableMapping.ColumnMappings.Add("manufacturingOrderCustomerOrderId", "manufacturingOrderCustomerOrderId")
            tableMapping.ColumnMappings.Add("manufacturingOrderLabel", "manufacturingOrderLabel")
            tableMapping.ColumnMappings.Add("manufacturingOrderCommercialSymbol", "manufacturingOrderCommercialSymbol")
            tableMapping.ColumnMappings.Add("manufacturingOrderIndustrialSymbol", "manufacturingOrderIndustrialSymbol")
            tableMapping.ColumnMappings.Add("manufacturingOrderQuantity", "manufacturingOrderQuantity")
            tableMapping.ColumnMappings.Add("manufacturingOrderDueDate", "manufacturingOrderDueDate")
            tableMapping.ColumnMappings.Add("manufacturingOrderScheduledDate", "manufacturingOrderScheduledDate")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `manufacturingorders` WHERE ((`manufacturingOrderId` = @Original_manu"& _ 
                "facturingOrderId) AND ((@IsNull_manufacturingOrderCustomerOrderId = 1 AND `manuf"& _ 
                "acturingOrderCustomerOrderId` IS NULL) OR (`manufacturingOrderCustomerOrderId` ="& _ 
                " @Original_manufacturingOrderCustomerOrderId)) AND ((@IsNull_manufacturingOrderL"& _ 
                "abel = 1 AND `manufacturingOrderLabel` IS NULL) OR (`manufacturingOrderLabel` = "& _ 
                "@Original_manufacturingOrderLabel)) AND ((@IsNull_manufacturingOrderCommercialSy"& _ 
                "mbol = 1 AND `manufacturingOrderCommercialSymbol` IS NULL) OR (`manufacturingOrd"& _ 
                "erCommercialSymbol` = @Original_manufacturingOrderCommercialSymbol)) AND ((@IsNu"& _ 
                "ll_manufacturingOrderIndustrialSymbol = 1 AND `manufacturingOrderIndustrialSymbo"& _ 
                "l` IS NULL) OR (`manufacturingOrderIndustrialSymbol` = @Original_manufacturingOr"& _ 
                "derIndustrialSymbol)) AND ((@IsNull_manufacturingOrderQuantity = 1 AND `manufact"& _ 
                "uringOrderQuantity` IS NULL) OR (`manufacturingOrderQuantity` = @Original_manufa"& _ 
                "cturingOrderQuantity)) AND ((@IsNull_manufacturingOrderDueDate = 1 AND `manufact"& _ 
                "uringOrderDueDate` IS NULL) OR (`manufacturingOrderDueDate` = @Original_manufact"& _ 
                "uringOrderDueDate)) AND ((@IsNull_manufacturingOrderScheduledDate = 1 AND `manuf"& _ 
                "acturingOrderScheduledDate` IS NULL) OR (`manufacturingOrderScheduledDate` = @Or"& _ 
                "iginal_manufacturingOrderScheduledDate)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_manufacturingOrderId"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "manufacturingOrderId"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_manufacturingOrderCustomerOrderId"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "manufacturingOrderCustomerOrderId"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_manufacturingOrderCustomerOrderId"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "manufacturingOrderCustomerOrderId"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_manufacturingOrderLabel"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "manufacturingOrderLabel"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_manufacturingOrderLabel"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "manufacturingOrderLabel"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_manufacturingOrderCommercialSymbol"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "manufacturingOrderCommercialSymbol"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_manufacturingOrderCommercialSymbol"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "manufacturingOrderCommercialSymbol"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_manufacturingOrderIndustrialSymbol"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "manufacturingOrderIndustrialSymbol"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_manufacturingOrderIndustrialSymbol"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "manufacturingOrderIndustrialSymbol"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_manufacturingOrderQuantity"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "manufacturingOrderQuantity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_manufacturingOrderQuantity"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "manufacturingOrderQuantity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_manufacturingOrderDueDate"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "manufacturingOrderDueDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_manufacturingOrderDueDate"
            param.DbType = Global.System.Data.DbType.DateTime
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "manufacturingOrderDueDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_manufacturingOrderScheduledDate"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "manufacturingOrderScheduledDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_manufacturingOrderScheduledDate"
            param.DbType = Global.System.Data.DbType.DateTime
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "manufacturingOrderScheduledDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `manufacturingorders` (`manufacturingOrderId`, `manufacturingOrderCus"& _ 
                "tomerOrderId`, `manufacturingOrderLabel`, `manufacturingOrderCommercialSymbol`, "& _ 
                "`manufacturingOrderIndustrialSymbol`, `manufacturingOrderQuantity`, `manufacturi"& _ 
                "ngOrderDueDate`, `manufacturingOrderScheduledDate`) VALUES (@manufacturingOrderI"& _ 
                "d, @manufacturingOrderCustomerOrderId, @manufacturingOrderLabel, @manufacturingO"& _ 
                "rderCommercialSymbol, @manufacturingOrderIndustrialSymbol, @manufacturingOrderQu"& _ 
                "antity, @manufacturingOrderDueDate, @manufacturingOrderScheduledDate)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@manufacturingOrderId"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "manufacturingOrderId"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@manufacturingOrderCustomerOrderId"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "manufacturingOrderCustomerOrderId"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@manufacturingOrderLabel"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "manufacturingOrderLabel"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@manufacturingOrderCommercialSymbol"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "manufacturingOrderCommercialSymbol"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@manufacturingOrderIndustrialSymbol"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "manufacturingOrderIndustrialSymbol"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@manufacturingOrderQuantity"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "manufacturingOrderQuantity"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@manufacturingOrderDueDate"
            param.DbType = Global.System.Data.DbType.DateTime
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "manufacturingOrderDueDate"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@manufacturingOrderScheduledDate"
            param.DbType = Global.System.Data.DbType.DateTime
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "manufacturingOrderScheduledDate"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `manufacturingorders` SET `manufacturingOrderId` = @manufacturingOrderId, "& _ 
                "`manufacturingOrderCustomerOrderId` = @manufacturingOrderCustomerOrderId, `manuf"& _ 
                "acturingOrderLabel` = @manufacturingOrderLabel, `manufacturingOrderCommercialSym"& _ 
                "bol` = @manufacturingOrderCommercialSymbol, `manufacturingOrderIndustrialSymbol`"& _ 
                " = @manufacturingOrderIndustrialSymbol, `manufacturingOrderQuantity` = @manufact"& _ 
                "uringOrderQuantity, `manufacturingOrderDueDate` = @manufacturingOrderDueDate, `m"& _ 
                "anufacturingOrderScheduledDate` = @manufacturingOrderScheduledDate WHERE ((`manu"& _ 
                "facturingOrderId` = @Original_manufacturingOrderId) AND ((@IsNull_manufacturingO"& _ 
                "rderCustomerOrderId = 1 AND `manufacturingOrderCustomerOrderId` IS NULL) OR (`ma"& _ 
                "nufacturingOrderCustomerOrderId` = @Original_manufacturingOrderCustomerOrderId))"& _ 
                " AND ((@IsNull_manufacturingOrderLabel = 1 AND `manufacturingOrderLabel` IS NULL"& _ 
                ") OR (`manufacturingOrderLabel` = @Original_manufacturingOrderLabel)) AND ((@IsN"& _ 
                "ull_manufacturingOrderCommercialSymbol = 1 AND `manufacturingOrderCommercialSymb"& _ 
                "ol` IS NULL) OR (`manufacturingOrderCommercialSymbol` = @Original_manufacturingO"& _ 
                "rderCommercialSymbol)) AND ((@IsNull_manufacturingOrderIndustrialSymbol = 1 AND "& _ 
                "`manufacturingOrderIndustrialSymbol` IS NULL) OR (`manufacturingOrderIndustrialS"& _ 
                "ymbol` = @Original_manufacturingOrderIndustrialSymbol)) AND ((@IsNull_manufactur"& _ 
                "ingOrderQuantity = 1 AND `manufacturingOrderQuantity` IS NULL) OR (`manufacturin"& _ 
                "gOrderQuantity` = @Original_manufacturingOrderQuantity)) AND ((@IsNull_manufactu"& _ 
                "ringOrderDueDate = 1 AND `manufacturingOrderDueDate` IS NULL) OR (`manufacturing"& _ 
                "OrderDueDate` = @Original_manufacturingOrderDueDate)) AND ((@IsNull_manufacturin"& _ 
                "gOrderScheduledDate = 1 AND `manufacturingOrderScheduledDate` IS NULL) OR (`manu"& _ 
                "facturingOrderScheduledDate` = @Original_manufacturingOrderScheduledDate)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@manufacturingOrderId"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "manufacturingOrderId"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@manufacturingOrderCustomerOrderId"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "manufacturingOrderCustomerOrderId"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@manufacturingOrderLabel"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "manufacturingOrderLabel"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@manufacturingOrderCommercialSymbol"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "manufacturingOrderCommercialSymbol"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@manufacturingOrderIndustrialSymbol"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "manufacturingOrderIndustrialSymbol"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@manufacturingOrderQuantity"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "manufacturingOrderQuantity"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@manufacturingOrderDueDate"
            param.DbType = Global.System.Data.DbType.DateTime
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "manufacturingOrderDueDate"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@manufacturingOrderScheduledDate"
            param.DbType = Global.System.Data.DbType.DateTime
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "manufacturingOrderScheduledDate"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_manufacturingOrderId"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "manufacturingOrderId"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_manufacturingOrderCustomerOrderId"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "manufacturingOrderCustomerOrderId"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_manufacturingOrderCustomerOrderId"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "manufacturingOrderCustomerOrderId"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_manufacturingOrderLabel"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "manufacturingOrderLabel"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_manufacturingOrderLabel"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "manufacturingOrderLabel"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_manufacturingOrderCommercialSymbol"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "manufacturingOrderCommercialSymbol"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_manufacturingOrderCommercialSymbol"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "manufacturingOrderCommercialSymbol"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_manufacturingOrderIndustrialSymbol"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "manufacturingOrderIndustrialSymbol"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_manufacturingOrderIndustrialSymbol"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "manufacturingOrderIndustrialSymbol"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_manufacturingOrderQuantity"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "manufacturingOrderQuantity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_manufacturingOrderQuantity"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "manufacturingOrderQuantity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_manufacturingOrderDueDate"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "manufacturingOrderDueDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_manufacturingOrderDueDate"
            param.DbType = Global.System.Data.DbType.DateTime
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "manufacturingOrderDueDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_manufacturingOrderScheduledDate"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "manufacturingOrderScheduledDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_manufacturingOrderScheduledDate"
            param.DbType = Global.System.Data.DbType.DateTime
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "manufacturingOrderScheduledDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection()
            Me._connection.ConnectionString = Global.XS156LinearTesterPole.My.MySettings.Default.XS156dataacquisitionConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(1) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT `manufacturingOrderId`, `manufacturingOrderCustomerOrderId`, `manufacturin"& _ 
                "gOrderLabel`, `manufacturingOrderCommercialSymbol`, `manufacturingOrderIndustria"& _ 
                "lSymbol`, `manufacturingOrderQuantity`, `manufacturingOrderDueDate`, `manufactur"& _ 
                "ingOrderScheduledDate` FROM `manufacturingorders`"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT `manufacturingOrderId`, `manufacturingOrderCustomerOrderId`, `manufacturin"& _ 
                "gOrderLabel`, `manufacturingOrderCommercialSymbol`, `manufacturingOrderIndustria"& _ 
                "lSymbol`, `manufacturingOrderQuantity`, `manufacturingOrderDueDate`, `manufactur"& _ 
                "ingOrderScheduledDate` FROM `manufacturingorders` where `manufacturingOrderId`= "& _ 
                "@ManufacturingOrder"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@ManufacturingOrder"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.Size = 40
            param.IsNullable = true
            param.SourceColumn = "manufacturingOrderId"
            Me._commandCollection(1).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dataacquisitionDataSet.manufacturingordersDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dataacquisitionDataSet.manufacturingordersDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dataacquisitionDataSet.manufacturingordersDataTable = New dataacquisitionDataSet.manufacturingordersDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByManufacturingOrder(ByVal dataTable As dataacquisitionDataSet.manufacturingordersDataTable, ByVal ManufacturingOrder As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (ManufacturingOrder Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ManufacturingOrder")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ManufacturingOrder,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByManufacturingOrder(ByVal ManufacturingOrder As String) As dataacquisitionDataSet.manufacturingordersDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (ManufacturingOrder Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ManufacturingOrder")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ManufacturingOrder,String)
            End If
            Dim dataTable As dataacquisitionDataSet.manufacturingordersDataTable = New dataacquisitionDataSet.manufacturingordersDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dataacquisitionDataSet.manufacturingordersDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dataacquisitionDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "manufacturingorders")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_manufacturingOrderId As String, ByVal Original_manufacturingOrderCustomerOrderId As String, ByVal Original_manufacturingOrderLabel As String, ByVal Original_manufacturingOrderCommercialSymbol As String, ByVal Original_manufacturingOrderIndustrialSymbol As String, ByVal Original_manufacturingOrderQuantity As Global.System.Nullable(Of UInteger), ByVal Original_manufacturingOrderDueDate As Global.System.Nullable(Of Date), ByVal Original_manufacturingOrderScheduledDate As Global.System.Nullable(Of Date)) As Integer
            If (Original_manufacturingOrderId Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_manufacturingOrderId")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_manufacturingOrderId,String)
            End If
            If (Original_manufacturingOrderCustomerOrderId Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_manufacturingOrderCustomerOrderId,String)
            End If
            If (Original_manufacturingOrderLabel Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_manufacturingOrderLabel,String)
            End If
            If (Original_manufacturingOrderCommercialSymbol Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_manufacturingOrderCommercialSymbol,String)
            End If
            If (Original_manufacturingOrderIndustrialSymbol Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_manufacturingOrderIndustrialSymbol,String)
            End If
            If (Original_manufacturingOrderQuantity.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_manufacturingOrderQuantity.Value,UInteger)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_manufacturingOrderDueDate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_manufacturingOrderDueDate.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_manufacturingOrderScheduledDate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_manufacturingOrderScheduledDate.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal manufacturingOrderId As String, ByVal manufacturingOrderCustomerOrderId As String, ByVal manufacturingOrderLabel As String, ByVal manufacturingOrderCommercialSymbol As String, ByVal manufacturingOrderIndustrialSymbol As String, ByVal manufacturingOrderQuantity As Global.System.Nullable(Of UInteger), ByVal manufacturingOrderDueDate As Global.System.Nullable(Of Date), ByVal manufacturingOrderScheduledDate As Global.System.Nullable(Of Date)) As Integer
            If (manufacturingOrderId Is Nothing) Then
                Throw New Global.System.ArgumentNullException("manufacturingOrderId")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(manufacturingOrderId,String)
            End If
            If (manufacturingOrderCustomerOrderId Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(manufacturingOrderCustomerOrderId,String)
            End If
            If (manufacturingOrderLabel Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(manufacturingOrderLabel,String)
            End If
            If (manufacturingOrderCommercialSymbol Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(manufacturingOrderCommercialSymbol,String)
            End If
            If (manufacturingOrderIndustrialSymbol Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(manufacturingOrderIndustrialSymbol,String)
            End If
            If (manufacturingOrderQuantity.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(manufacturingOrderQuantity.Value,UInteger)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (manufacturingOrderDueDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(manufacturingOrderDueDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (manufacturingOrderScheduledDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(manufacturingOrderScheduledDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal manufacturingOrderId As String,  _
                    ByVal manufacturingOrderCustomerOrderId As String,  _
                    ByVal manufacturingOrderLabel As String,  _
                    ByVal manufacturingOrderCommercialSymbol As String,  _
                    ByVal manufacturingOrderIndustrialSymbol As String,  _
                    ByVal manufacturingOrderQuantity As Global.System.Nullable(Of UInteger),  _
                    ByVal manufacturingOrderDueDate As Global.System.Nullable(Of Date),  _
                    ByVal manufacturingOrderScheduledDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_manufacturingOrderId As String,  _
                    ByVal Original_manufacturingOrderCustomerOrderId As String,  _
                    ByVal Original_manufacturingOrderLabel As String,  _
                    ByVal Original_manufacturingOrderCommercialSymbol As String,  _
                    ByVal Original_manufacturingOrderIndustrialSymbol As String,  _
                    ByVal Original_manufacturingOrderQuantity As Global.System.Nullable(Of UInteger),  _
                    ByVal Original_manufacturingOrderDueDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_manufacturingOrderScheduledDate As Global.System.Nullable(Of Date)) As Integer
            If (manufacturingOrderId Is Nothing) Then
                Throw New Global.System.ArgumentNullException("manufacturingOrderId")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(manufacturingOrderId,String)
            End If
            If (manufacturingOrderCustomerOrderId Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(manufacturingOrderCustomerOrderId,String)
            End If
            If (manufacturingOrderLabel Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(manufacturingOrderLabel,String)
            End If
            If (manufacturingOrderCommercialSymbol Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(manufacturingOrderCommercialSymbol,String)
            End If
            If (manufacturingOrderIndustrialSymbol Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(manufacturingOrderIndustrialSymbol,String)
            End If
            If (manufacturingOrderQuantity.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(manufacturingOrderQuantity.Value,UInteger)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (manufacturingOrderDueDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(manufacturingOrderDueDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (manufacturingOrderScheduledDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(manufacturingOrderScheduledDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Original_manufacturingOrderId Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_manufacturingOrderId")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_manufacturingOrderId,String)
            End If
            If (Original_manufacturingOrderCustomerOrderId Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_manufacturingOrderCustomerOrderId,String)
            End If
            If (Original_manufacturingOrderLabel Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_manufacturingOrderLabel,String)
            End If
            If (Original_manufacturingOrderCommercialSymbol Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_manufacturingOrderCommercialSymbol,String)
            End If
            If (Original_manufacturingOrderIndustrialSymbol Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_manufacturingOrderIndustrialSymbol,String)
            End If
            If (Original_manufacturingOrderQuantity.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_manufacturingOrderQuantity.Value,UInteger)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_manufacturingOrderDueDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_manufacturingOrderDueDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_manufacturingOrderScheduledDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_manufacturingOrderScheduledDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal manufacturingOrderCustomerOrderId As String, ByVal manufacturingOrderLabel As String, ByVal manufacturingOrderCommercialSymbol As String, ByVal manufacturingOrderIndustrialSymbol As String, ByVal manufacturingOrderQuantity As Global.System.Nullable(Of UInteger), ByVal manufacturingOrderDueDate As Global.System.Nullable(Of Date), ByVal manufacturingOrderScheduledDate As Global.System.Nullable(Of Date), ByVal Original_manufacturingOrderId As String, ByVal Original_manufacturingOrderCustomerOrderId As String, ByVal Original_manufacturingOrderLabel As String, ByVal Original_manufacturingOrderCommercialSymbol As String, ByVal Original_manufacturingOrderIndustrialSymbol As String, ByVal Original_manufacturingOrderQuantity As Global.System.Nullable(Of UInteger), ByVal Original_manufacturingOrderDueDate As Global.System.Nullable(Of Date), ByVal Original_manufacturingOrderScheduledDate As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(Original_manufacturingOrderId, manufacturingOrderCustomerOrderId, manufacturingOrderLabel, manufacturingOrderCommercialSymbol, manufacturingOrderIndustrialSymbol, manufacturingOrderQuantity, manufacturingOrderDueDate, manufacturingOrderScheduledDate, Original_manufacturingOrderId, Original_manufacturingOrderCustomerOrderId, Original_manufacturingOrderLabel, Original_manufacturingOrderCommercialSymbol, Original_manufacturingOrderIndustrialSymbol, Original_manufacturingOrderQuantity, Original_manufacturingOrderDueDate, Original_manufacturingOrderScheduledDate)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class measurementresultsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "measurementresults"
            tableMapping.ColumnMappings.Add("measurementResultId", "measurementResultId")
            tableMapping.ColumnMappings.Add("measurementResultProduct", "measurementResultProduct")
            tableMapping.ColumnMappings.Add("measurementResultWorkOrder", "measurementResultWorkOrder")
            tableMapping.ColumnMappings.Add("measurementResultDate", "measurementResultDate")
            tableMapping.ColumnMappings.Add("measurementResultProductDefect", "measurementResultProductDefect")
            tableMapping.ColumnMappings.Add("measurementResultName1", "measurementResultName1")
            tableMapping.ColumnMappings.Add("measurementResultMeasure1", "measurementResultMeasure1")
            tableMapping.ColumnMappings.Add("measurementResultName2", "measurementResultName2")
            tableMapping.ColumnMappings.Add("measurementResultMeasure2", "measurementResultMeasure2")
            tableMapping.ColumnMappings.Add("measurementResultName3", "measurementResultName3")
            tableMapping.ColumnMappings.Add("measurementResultMeasure3", "measurementResultMeasure3")
            tableMapping.ColumnMappings.Add("measurementResultName4", "measurementResultName4")
            tableMapping.ColumnMappings.Add("measurementResultMeasure4", "measurementResultMeasure4")
            tableMapping.ColumnMappings.Add("measurementResultName5", "measurementResultName5")
            tableMapping.ColumnMappings.Add("measurementResultMeasure5", "measurementResultMeasure5")
            tableMapping.ColumnMappings.Add("measurementResultName6", "measurementResultName6")
            tableMapping.ColumnMappings.Add("measurementResultMeasure6", "measurementResultMeasure6")
            tableMapping.ColumnMappings.Add("measurementResultName7", "measurementResultName7")
            tableMapping.ColumnMappings.Add("measurementResultMeasure7", "measurementResultMeasure7")
            tableMapping.ColumnMappings.Add("measurementResultName8", "measurementResultName8")
            tableMapping.ColumnMappings.Add("measurementResultMeasure8", "measurementResultMeasure8")
            tableMapping.ColumnMappings.Add("measurementResultName9", "measurementResultName9")
            tableMapping.ColumnMappings.Add("measurementResultMeasure9", "measurementResultMeasure9")
            tableMapping.ColumnMappings.Add("measurementResultName10", "measurementResultName10")
            tableMapping.ColumnMappings.Add("measurementResultMeasure10", "measurementResultMeasure10")
            tableMapping.ColumnMappings.Add("measurementResultName11", "measurementResultName11")
            tableMapping.ColumnMappings.Add("measurementResultMeasure11", "measurementResultMeasure11")
            tableMapping.ColumnMappings.Add("measurementResultName12", "measurementResultName12")
            tableMapping.ColumnMappings.Add("measurementResultMeasure12", "measurementResultMeasure12")
            tableMapping.ColumnMappings.Add("measurementResultName13", "measurementResultName13")
            tableMapping.ColumnMappings.Add("measurementResultMeasure13", "measurementResultMeasure13")
            tableMapping.ColumnMappings.Add("measurementResultName14", "measurementResultName14")
            tableMapping.ColumnMappings.Add("measurementResultMeasure14", "measurementResultMeasure14")
            tableMapping.ColumnMappings.Add("measurementResultName15", "measurementResultName15")
            tableMapping.ColumnMappings.Add("measurementResultMeasure15", "measurementResultMeasure15")
            tableMapping.ColumnMappings.Add("measurementResultName16", "measurementResultName16")
            tableMapping.ColumnMappings.Add("measurementResultMeasure16", "measurementResultMeasure16")
            tableMapping.ColumnMappings.Add("measurementResultName17", "measurementResultName17")
            tableMapping.ColumnMappings.Add("measurementResultMeasure17", "measurementResultMeasure17")
            tableMapping.ColumnMappings.Add("measurementResultName18", "measurementResultName18")
            tableMapping.ColumnMappings.Add("measurementResultMeasure18", "measurementResultMeasure18")
            tableMapping.ColumnMappings.Add("measurementResultName19", "measurementResultName19")
            tableMapping.ColumnMappings.Add("measurementResultMeasure19", "measurementResultMeasure19")
            tableMapping.ColumnMappings.Add("measurementResultName20", "measurementResultName20")
            tableMapping.ColumnMappings.Add("measurementResultMeasure20", "measurementResultMeasure20")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `measurementresults` WHERE ((`measurementResultId` = @Original_measur"& _ 
                "ementResultId) AND ((@IsNull_measurementResultProduct = 1 AND `measurementResult"& _ 
                "Product` IS NULL) OR (`measurementResultProduct` = @Original_measurementResultPr"& _ 
                "oduct)) AND ((@IsNull_measurementResultWorkOrder = 1 AND `measurementResultWorkO"& _ 
                "rder` IS NULL) OR (`measurementResultWorkOrder` = @Original_measurementResultWor"& _ 
                "kOrder)) AND (`measurementResultDate` = @Original_measurementResultDate) AND ((@"& _ 
                "IsNull_measurementResultProductDefect = 1 AND `measurementResultProductDefect` I"& _ 
                "S NULL) OR (`measurementResultProductDefect` = @Original_measurementResultProduc"& _ 
                "tDefect)) AND (`measurementResultName1` = @Original_measurementResultName1) AND "& _ 
                "(`measurementResultMeasure1` = @Original_measurementResultMeasure1) AND ((@IsNul"& _ 
                "l_measurementResultName2 = 1 AND `measurementResultName2` IS NULL) OR (`measurem"& _ 
                "entResultName2` = @Original_measurementResultName2)) AND ((@IsNull_measurementRe"& _ 
                "sultMeasure2 = 1 AND `measurementResultMeasure2` IS NULL) OR (`measurementResult"& _ 
                "Measure2` = @Original_measurementResultMeasure2)) AND ((@IsNull_measurementResul"& _ 
                "tName3 = 1 AND `measurementResultName3` IS NULL) OR (`measurementResultName3` = "& _ 
                "@Original_measurementResultName3)) AND ((@IsNull_measurementResultMeasure3 = 1 A"& _ 
                "ND `measurementResultMeasure3` IS NULL) OR (`measurementResultMeasure3` = @Origi"& _ 
                "nal_measurementResultMeasure3)) AND ((@IsNull_measurementResultName4 = 1 AND `me"& _ 
                "asurementResultName4` IS NULL) OR (`measurementResultName4` = @Original_measurem"& _ 
                "entResultName4)) AND ((@IsNull_measurementResultMeasure4 = 1 AND `measurementRes"& _ 
                "ultMeasure4` IS NULL) OR (`measurementResultMeasure4` = @Original_measurementRes"& _ 
                "ultMeasure4)) AND ((@IsNull_measurementResultName5 = 1 AND `measurementResultNam"& _ 
                "e5` IS NULL) OR (`measurementResultName5` = @Original_measurementResultName5)) A"& _ 
                "ND ((@IsNull_measurementResultMeasure5 = 1 AND `measurementResultMeasure5` IS NU"& _ 
                "LL) OR (`measurementResultMeasure5` = @Original_measurementResultMeasure5)) AND "& _ 
                "((@IsNull_measurementResultName6 = 1 AND `measurementResultName6` IS NULL) OR (`"& _ 
                "measurementResultName6` = @Original_measurementResultName6)) AND ((@IsNull_measu"& _ 
                "rementResultMeasure6 = 1 AND `measurementResultMeasure6` IS NULL) OR (`measureme"& _ 
                "ntResultMeasure6` = @Original_measurementResultMeasure6)) AND ((@IsNull_measurem"& _ 
                "entResultName7 = 1 AND `measurementResultName7` IS NULL) OR (`measurementResultN"& _ 
                "ame7` = @Original_measurementResultName7)) AND ((@IsNull_measurementResultMeasur"& _ 
                "e7 = 1 AND `measurementResultMeasure7` IS NULL) OR (`measurementResultMeasure7` "& _ 
                "= @Original_measurementResultMeasure7)) AND ((@IsNull_measurementResultName8 = 1"& _ 
                " AND `measurementResultName8` IS NULL) OR (`measurementResultName8` = @Original_"& _ 
                "measurementResultName8)) AND ((@IsNull_measurementResultMeasure8 = 1 AND `measur"& _ 
                "ementResultMeasure8` IS NULL) OR (`measurementResultMeasure8` = @Original_measur"& _ 
                "ementResultMeasure8)) AND ((@IsNull_measurementResultName9 = 1 AND `measurementR"& _ 
                "esultName9` IS NULL) OR (`measurementResultName9` = @Original_measurementResultN"& _ 
                "ame9)) AND ((@IsNull_measurementResultMeasure9 = 1 AND `measurementResultMeasure"& _ 
                "9` IS NULL) OR (`measurementResultMeasure9` = @Original_measurementResultMeasure"& _ 
                "9)) AND ((@IsNull_measurementResultName10 = 1 AND `measurementResultName10` IS N"& _ 
                "ULL) OR (`measurementResultName10` = @Original_measurementResultName10)) AND ((@"& _ 
                "IsNull_measurementResultMeasure10 = 1 AND `measurementResultMeasure10` IS NULL) "& _ 
                "OR (`measurementResultMeasure10` = @Original_measurementResultMeasure10)) AND (("& _ 
                "@IsNull_measurementResultName11 = 1 AND `measurementResultName11` IS NULL) OR (`"& _ 
                "measurementResultName11` = @Original_measurementResultName11)) AND ((@IsNull_mea"& _ 
                "surementResultMeasure11 = 1 AND `measurementResultMeasure11` IS NULL) OR (`measu"& _ 
                "rementResultMeasure11` = @Original_measurementResultMeasure11)) AND ((@IsNull_me"& _ 
                "asurementResultName12 = 1 AND `measurementResultName12` IS NULL) OR (`measuremen"& _ 
                "tResultName12` = @Original_measurementResultName12)) AND ((@IsNull_measurementRe"& _ 
                "sultMeasure12 = 1 AND `measurementResultMeasure12` IS NULL) OR (`measurementResu"& _ 
                "ltMeasure12` = @Original_measurementResultMeasure12)) AND ((@IsNull_measurementR"& _ 
                "esultName13 = 1 AND `measurementResultName13` IS NULL) OR (`measurementResultNam"& _ 
                "e13` = @Original_measurementResultName13)) AND ((@IsNull_measurementResultMeasur"& _ 
                "e13 = 1 AND `measurementResultMeasure13` IS NULL) OR (`measurementResultMeasure1"& _ 
                "3` = @Original_measurementResultMeasure13)) AND ((@IsNull_measurementResultName1"& _ 
                "4 = 1 AND `measurementResultName14` IS NULL) OR (`measurementResultName14` = @Or"& _ 
                "iginal_measurementResultName14)) AND ((@IsNull_measurementResultMeasure14 = 1 AN"& _ 
                "D `measurementResultMeasure14` IS NULL) OR (`measurementResultMeasure14` = @Orig"& _ 
                "inal_measurementResultMeasure14)) AND ((@IsNull_measurementResultName15 = 1 AND "& _ 
                "`measurementResultName15` IS NULL) OR (`measurementResultName15` = @Original_mea"& _ 
                "surementResultName15)) AND ((@IsNull_measurementResultMeasure15 = 1 AND `measure"& _ 
                "mentResultMeasure15` IS NULL) OR (`measurementResultMeasure15` = @Original_measu"& _ 
                "rementResultMeasure15)) AND ((@IsNull_measurementResultName16 = 1 AND `measureme"& _ 
                "ntResultName16` IS NULL) OR (`measurementResultName16` = @Original_measurementRe"& _ 
                "sultName16)) AND ((@IsNull_measurementResultMeasure16 = 1 AND `measurementResult"& _ 
                "Measure16` IS NULL) OR (`measurementResultMeasure16` = @Original_measurementResu"& _ 
                "ltMeasure16)) AND ((@IsNull_measurementResultName17 = 1 AND `measurementResultNa"& _ 
                "me17` IS NULL) OR (`measurementResultName17` = @Original_measurementResultName17"& _ 
                ")) AND ((@IsNull_measurementResultMeasure17 = 1 AND `measurementResultMeasure17`"& _ 
                " IS NULL) OR (`measurementResultMeasure17` = @Original_measurementResultMeasure1"& _ 
                "7)) AND ((@IsNull_measurementResultName18 = 1 AND `measurementResultName18` IS N"& _ 
                "ULL) OR (`measurementResultName18` = @Original_measurementResultName18)) AND ((@"& _ 
                "IsNull_measurementResultMeasure18 = 1 AND `measurementResultMeasure18` IS NULL) "& _ 
                "OR (`measurementResultMeasure18` = @Original_measurementResultMeasure18)) AND (("& _ 
                "@IsNull_measurementResultName19 = 1 AND `measurementResultName19` IS NULL) OR (`"& _ 
                "measurementResultName19` = @Original_measurementResultName19)) AND ((@IsNull_mea"& _ 
                "surementResultMeasure19 = 1 AND `measurementResultMeasure19` IS NULL) OR (`measu"& _ 
                "rementResultMeasure19` = @Original_measurementResultMeasure19)) AND ((@IsNull_me"& _ 
                "asurementResultName20 = 1 AND `measurementResultName20` IS NULL) OR (`measuremen"& _ 
                "tResultName20` = @Original_measurementResultName20)) AND ((@IsNull_measurementRe"& _ 
                "sultMeasure20 = 1 AND `measurementResultMeasure20` IS NULL) OR (`measurementResu"& _ 
                "ltMeasure20` = @Original_measurementResultMeasure20)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultId"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultId"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultProduct"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultProduct"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultProduct"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultProduct"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultWorkOrder"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultWorkOrder"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultWorkOrder"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultWorkOrder"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultDate"
            param.DbType = Global.System.Data.DbType.DateTime
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "measurementResultDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultProductDefect"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultProductDefect"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultProductDefect"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "measurementResultProductDefect"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultName1"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultMeasure1"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultName2"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultName2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultName2"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultMeasure2"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultMeasure2"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultName3"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultName3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultName3"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultMeasure3"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultMeasure3"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultName4"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultName4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultName4"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultMeasure4"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultMeasure4"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultName5"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultName5"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultName5"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName5"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultMeasure5"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure5"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultMeasure5"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure5"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultName6"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultName6"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultName6"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName6"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultMeasure6"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure6"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultMeasure6"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure6"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultName7"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultName7"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultName7"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName7"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultMeasure7"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure7"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultMeasure7"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure7"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultName8"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultName8"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultName8"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName8"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultMeasure8"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure8"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultMeasure8"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure8"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultName9"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultName9"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultName9"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName9"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultMeasure9"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure9"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultMeasure9"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure9"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultName10"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultName10"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultName10"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName10"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultMeasure10"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure10"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultMeasure10"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure10"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultName11"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultName11"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultName11"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName11"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultMeasure11"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure11"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultMeasure11"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure11"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultName12"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultName12"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultName12"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName12"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultMeasure12"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure12"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultMeasure12"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure12"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultName13"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultName13"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultName13"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName13"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultMeasure13"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure13"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultMeasure13"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure13"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultName14"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultName14"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultName14"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName14"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultMeasure14"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure14"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultMeasure14"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure14"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultName15"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultName15"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultName15"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName15"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultMeasure15"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure15"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultMeasure15"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure15"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultName16"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultName16"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultName16"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName16"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultMeasure16"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure16"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultMeasure16"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure16"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultName17"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultName17"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultName17"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName17"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultMeasure17"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure17"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultMeasure17"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure17"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultName18"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultName18"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultName18"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName18"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultMeasure18"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure18"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultMeasure18"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure18"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultName19"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultName19"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultName19"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName19"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultMeasure19"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure19"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultMeasure19"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure19"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultName20"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultName20"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultName20"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName20"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultMeasure20"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure20"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultMeasure20"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure20"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `measurementresults` (`measurementResultId`, `measurementResultProduc"& _ 
                "t`, `measurementResultWorkOrder`, `measurementResultDate`, `measurementResultPro"& _ 
                "ductDefect`, `measurementResultName1`, `measurementResultMeasure1`, `measurement"& _ 
                "ResultName2`, `measurementResultMeasure2`, `measurementResultName3`, `measuremen"& _ 
                "tResultMeasure3`, `measurementResultName4`, `measurementResultMeasure4`, `measur"& _ 
                "ementResultName5`, `measurementResultMeasure5`, `measurementResultName6`, `measu"& _ 
                "rementResultMeasure6`, `measurementResultName7`, `measurementResultMeasure7`, `m"& _ 
                "easurementResultName8`, `measurementResultMeasure8`, `measurementResultName9`, `"& _ 
                "measurementResultMeasure9`, `measurementResultName10`, `measurementResultMeasure"& _ 
                "10`, `measurementResultName11`, `measurementResultMeasure11`, `measurementResult"& _ 
                "Name12`, `measurementResultMeasure12`, `measurementResultName13`, `measurementRe"& _ 
                "sultMeasure13`, `measurementResultName14`, `measurementResultMeasure14`, `measur"& _ 
                "ementResultName15`, `measurementResultMeasure15`, `measurementResultName16`, `me"& _ 
                "asurementResultMeasure16`, `measurementResultName17`, `measurementResultMeasure1"& _ 
                "7`, `measurementResultName18`, `measurementResultMeasure18`, `measurementResultN"& _ 
                "ame19`, `measurementResultMeasure19`, `measurementResultName20`, `measurementRes"& _ 
                "ultMeasure20`) VALUES (@measurementResultId, @measurementResultProduct, @measure"& _ 
                "mentResultWorkOrder, @measurementResultDate, @measurementResultProductDefect, @m"& _ 
                "easurementResultName1, @measurementResultMeasure1, @measurementResultName2, @mea"& _ 
                "surementResultMeasure2, @measurementResultName3, @measurementResultMeasure3, @me"& _ 
                "asurementResultName4, @measurementResultMeasure4, @measurementResultName5, @meas"& _ 
                "urementResultMeasure5, @measurementResultName6, @measurementResultMeasure6, @mea"& _ 
                "surementResultName7, @measurementResultMeasure7, @measurementResultName8, @measu"& _ 
                "rementResultMeasure8, @measurementResultName9, @measurementResultMeasure9, @meas"& _ 
                "urementResultName10, @measurementResultMeasure10, @measurementResultName11, @mea"& _ 
                "surementResultMeasure11, @measurementResultName12, @measurementResultMeasure12, "& _ 
                "@measurementResultName13, @measurementResultMeasure13, @measurementResultName14,"& _ 
                " @measurementResultMeasure14, @measurementResultName15, @measurementResultMeasur"& _ 
                "e15, @measurementResultName16, @measurementResultMeasure16, @measurementResultNa"& _ 
                "me17, @measurementResultMeasure17, @measurementResultName18, @measurementResultM"& _ 
                "easure18, @measurementResultName19, @measurementResultMeasure19, @measurementRes"& _ 
                "ultName20, @measurementResultMeasure20)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultId"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultId"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultProduct"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultProduct"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultWorkOrder"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultWorkOrder"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultDate"
            param.DbType = Global.System.Data.DbType.DateTime
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "measurementResultDate"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultProductDefect"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "measurementResultProductDefect"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultName1"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName1"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultMeasure1"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure1"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultName2"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName2"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultMeasure2"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure2"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultName3"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName3"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultMeasure3"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure3"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultName4"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName4"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultMeasure4"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure4"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultName5"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName5"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultMeasure5"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure5"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultName6"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName6"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultMeasure6"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure6"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultName7"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName7"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultMeasure7"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure7"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultName8"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName8"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultMeasure8"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure8"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultName9"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName9"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultMeasure9"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure9"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultName10"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName10"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultMeasure10"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure10"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultName11"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName11"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultMeasure11"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure11"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultName12"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName12"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultMeasure12"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure12"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultName13"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName13"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultMeasure13"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure13"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultName14"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName14"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultMeasure14"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure14"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultName15"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName15"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultMeasure15"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure15"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultName16"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName16"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultMeasure16"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure16"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultName17"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName17"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultMeasure17"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure17"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultName18"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName18"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultMeasure18"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure18"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultName19"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName19"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultMeasure19"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure19"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultName20"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName20"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultMeasure20"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure20"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `measurementresults` SET `measurementResultId` = @measurementResultId, `me"& _ 
                "asurementResultProduct` = @measurementResultProduct, `measurementResultWorkOrder"& _ 
                "` = @measurementResultWorkOrder, `measurementResultDate` = @measurementResultDat"& _ 
                "e, `measurementResultProductDefect` = @measurementResultProductDefect, `measurem"& _ 
                "entResultName1` = @measurementResultName1, `measurementResultMeasure1` = @measur"& _ 
                "ementResultMeasure1, `measurementResultName2` = @measurementResultName2, `measur"& _ 
                "ementResultMeasure2` = @measurementResultMeasure2, `measurementResultName3` = @m"& _ 
                "easurementResultName3, `measurementResultMeasure3` = @measurementResultMeasure3,"& _ 
                " `measurementResultName4` = @measurementResultName4, `measurementResultMeasure4`"& _ 
                " = @measurementResultMeasure4, `measurementResultName5` = @measurementResultName"& _ 
                "5, `measurementResultMeasure5` = @measurementResultMeasure5, `measurementResultN"& _ 
                "ame6` = @measurementResultName6, `measurementResultMeasure6` = @measurementResul"& _ 
                "tMeasure6, `measurementResultName7` = @measurementResultName7, `measurementResul"& _ 
                "tMeasure7` = @measurementResultMeasure7, `measurementResultName8` = @measurement"& _ 
                "ResultName8, `measurementResultMeasure8` = @measurementResultMeasure8, `measurem"& _ 
                "entResultName9` = @measurementResultName9, `measurementResultMeasure9` = @measur"& _ 
                "ementResultMeasure9, `measurementResultName10` = @measurementResultName10, `meas"& _ 
                "urementResultMeasure10` = @measurementResultMeasure10, `measurementResultName11`"& _ 
                " = @measurementResultName11, `measurementResultMeasure11` = @measurementResultMe"& _ 
                "asure11, `measurementResultName12` = @measurementResultName12, `measurementResul"& _ 
                "tMeasure12` = @measurementResultMeasure12, `measurementResultName13` = @measurem"& _ 
                "entResultName13, `measurementResultMeasure13` = @measurementResultMeasure13, `me"& _ 
                "asurementResultName14` = @measurementResultName14, `measurementResultMeasure14` "& _ 
                "= @measurementResultMeasure14, `measurementResultName15` = @measurementResultNam"& _ 
                "e15, `measurementResultMeasure15` = @measurementResultMeasure15, `measurementRes"& _ 
                "ultName16` = @measurementResultName16, `measurementResultMeasure16` = @measureme"& _ 
                "ntResultMeasure16, `measurementResultName17` = @measurementResultName17, `measur"& _ 
                "ementResultMeasure17` = @measurementResultMeasure17, `measurementResultName18` ="& _ 
                " @measurementResultName18, `measurementResultMeasure18` = @measurementResultMeas"& _ 
                "ure18, `measurementResultName19` = @measurementResultName19, `measurementResultM"& _ 
                "easure19` = @measurementResultMeasure19, `measurementResultName20` = @measuremen"& _ 
                "tResultName20, `measurementResultMeasure20` = @measurementResultMeasure20 WHERE "& _ 
                "((`measurementResultId` = @Original_measurementResultId) AND ((@IsNull_measureme"& _ 
                "ntResultProduct = 1 AND `measurementResultProduct` IS NULL) OR (`measurementResu"& _ 
                "ltProduct` = @Original_measurementResultProduct)) AND ((@IsNull_measurementResul"& _ 
                "tWorkOrder = 1 AND `measurementResultWorkOrder` IS NULL) OR (`measurementResultW"& _ 
                "orkOrder` = @Original_measurementResultWorkOrder)) AND (`measurementResultDate` "& _ 
                "= @Original_measurementResultDate) AND ((@IsNull_measurementResultProductDefect "& _ 
                "= 1 AND `measurementResultProductDefect` IS NULL) OR (`measurementResultProductD"& _ 
                "efect` = @Original_measurementResultProductDefect)) AND (`measurementResultName1"& _ 
                "` = @Original_measurementResultName1) AND (`measurementResultMeasure1` = @Origin"& _ 
                "al_measurementResultMeasure1) AND ((@IsNull_measurementResultName2 = 1 AND `meas"& _ 
                "urementResultName2` IS NULL) OR (`measurementResultName2` = @Original_measuremen"& _ 
                "tResultName2)) AND ((@IsNull_measurementResultMeasure2 = 1 AND `measurementResul"& _ 
                "tMeasure2` IS NULL) OR (`measurementResultMeasure2` = @Original_measurementResul"& _ 
                "tMeasure2)) AND ((@IsNull_measurementResultName3 = 1 AND `measurementResultName3"& _ 
                "` IS NULL) OR (`measurementResultName3` = @Original_measurementResultName3)) AND"& _ 
                " ((@IsNull_measurementResultMeasure3 = 1 AND `measurementResultMeasure3` IS NULL"& _ 
                ") OR (`measurementResultMeasure3` = @Original_measurementResultMeasure3)) AND (("& _ 
                "@IsNull_measurementResultName4 = 1 AND `measurementResultName4` IS NULL) OR (`me"& _ 
                "asurementResultName4` = @Original_measurementResultName4)) AND ((@IsNull_measure"& _ 
                "mentResultMeasure4 = 1 AND `measurementResultMeasure4` IS NULL) OR (`measurement"& _ 
                "ResultMeasure4` = @Original_measurementResultMeasure4)) AND ((@IsNull_measuremen"& _ 
                "tResultName5 = 1 AND `measurementResultName5` IS NULL) OR (`measurementResultNam"& _ 
                "e5` = @Original_measurementResultName5)) AND ((@IsNull_measurementResultMeasure5"& _ 
                " = 1 AND `measurementResultMeasure5` IS NULL) OR (`measurementResultMeasure5` = "& _ 
                "@Original_measurementResultMeasure5)) AND ((@IsNull_measurementResultName6 = 1 A"& _ 
                "ND `measurementResultName6` IS NULL) OR (`measurementResultName6` = @Original_me"& _ 
                "asurementResultName6)) AND ((@IsNull_measurementResultMeasure6 = 1 AND `measurem"& _ 
                "entResultMeasure6` IS NULL) OR (`measurementResultMeasure6` = @Original_measurem"& _ 
                "entResultMeasure6)) AND ((@IsNull_measurementResultName7 = 1 AND `measurementRes"& _ 
                "ultName7` IS NULL) OR (`measurementResultName7` = @Original_measurementResultNam"& _ 
                "e7)) AND ((@IsNull_measurementResultMeasure7 = 1 AND `measurementResultMeasure7`"& _ 
                " IS NULL) OR (`measurementResultMeasure7` = @Original_measurementResultMeasure7)"& _ 
                ") AND ((@IsNull_measurementResultName8 = 1 AND `measurementResultName8` IS NULL)"& _ 
                " OR (`measurementResultName8` = @Original_measurementResultName8)) AND ((@IsNull"& _ 
                "_measurementResultMeasure8 = 1 AND `measurementResultMeasure8` IS NULL) OR (`mea"& _ 
                "surementResultMeasure8` = @Original_measurementResultMeasure8)) AND ((@IsNull_me"& _ 
                "asurementResultName9 = 1 AND `measurementResultName9` IS NULL) OR (`measurementR"& _ 
                "esultName9` = @Original_measurementResultName9)) AND ((@IsNull_measurementResult"& _ 
                "Measure9 = 1 AND `measurementResultMeasure9` IS NULL) OR (`measurementResultMeas"& _ 
                "ure9` = @Original_measurementResultMeasure9)) AND ((@IsNull_measurementResultNam"& _ 
                "e10 = 1 AND `measurementResultName10` IS NULL) OR (`measurementResultName10` = @"& _ 
                "Original_measurementResultName10)) AND ((@IsNull_measurementResultMeasure10 = 1 "& _ 
                "AND `measurementResultMeasure10` IS NULL) OR (`measurementResultMeasure10` = @Or"& _ 
                "iginal_measurementResultMeasure10)) AND ((@IsNull_measurementResultName11 = 1 AN"& _ 
                "D `measurementResultName11` IS NULL) OR (`measurementResultName11` = @Original_m"& _ 
                "easurementResultName11)) AND ((@IsNull_measurementResultMeasure11 = 1 AND `measu"& _ 
                "rementResultMeasure11` IS NULL) OR (`measurementResultMeasure11` = @Original_mea"& _ 
                "surementResultMeasure11)) AND ((@IsNull_measurementResultName12 = 1 AND `measure"& _ 
                "mentResultName12` IS NULL) OR (`measurementResultName12` = @Original_measurement"& _ 
                "ResultName12)) AND ((@IsNull_measurementResultMeasure12 = 1 AND `measurementResu"& _ 
                "ltMeasure12` IS NULL) OR (`measurementResultMeasure12` = @Original_measurementRe"& _ 
                "sultMeasure12)) AND ((@IsNull_measurementResultName13 = 1 AND `measurementResult"& _ 
                "Name13` IS NULL) OR (`measurementResultName13` = @Original_measurementResultName"& _ 
                "13)) AND ((@IsNull_measurementResultMeasure13 = 1 AND `measurementResultMeasure1"& _ 
                "3` IS NULL) OR (`measurementResultMeasure13` = @Original_measurementResultMeasur"& _ 
                "e13)) AND ((@IsNull_measurementResultName14 = 1 AND `measurementResultName14` IS"& _ 
                " NULL) OR (`measurementResultName14` = @Original_measurementResultName14)) AND ("& _ 
                "(@IsNull_measurementResultMeasure14 = 1 AND `measurementResultMeasure14` IS NULL"& _ 
                ") OR (`measurementResultMeasure14` = @Original_measurementResultMeasure14)) AND "& _ 
                "((@IsNull_measurementResultName15 = 1 AND `measurementResultName15` IS NULL) OR "& _ 
                "(`measurementResultName15` = @Original_measurementResultName15)) AND ((@IsNull_m"& _ 
                "easurementResultMeasure15 = 1 AND `measurementResultMeasure15` IS NULL) OR (`mea"& _ 
                "surementResultMeasure15` = @Original_measurementResultMeasure15)) AND ((@IsNull_"& _ 
                "measurementResultName16 = 1 AND `measurementResultName16` IS NULL) OR (`measurem"& _ 
                "entResultName16` = @Original_measurementResultName16)) AND ((@IsNull_measurement"& _ 
                "ResultMeasure16 = 1 AND `measurementResultMeasure16` IS NULL) OR (`measurementRe"& _ 
                "sultMeasure16` = @Original_measurementResultMeasure16)) AND ((@IsNull_measuremen"& _ 
                "tResultName17 = 1 AND `measurementResultName17` IS NULL) OR (`measurementResultN"& _ 
                "ame17` = @Original_measurementResultName17)) AND ((@IsNull_measurementResultMeas"& _ 
                "ure17 = 1 AND `measurementResultMeasure17` IS NULL) OR (`measurementResultMeasur"& _ 
                "e17` = @Original_measurementResultMeasure17)) AND ((@IsNull_measurementResultNam"& _ 
                "e18 = 1 AND `measurementResultName18` IS NULL) OR (`measurementResultName18` = @"& _ 
                "Original_measurementResultName18)) AND ((@IsNull_measurementResultMeasure18 = 1 "& _ 
                "AND `measurementResultMeasure18` IS NULL) OR (`measurementResultMeasure18` = @Or"& _ 
                "iginal_measurementResultMeasure18)) AND ((@IsNull_measurementResultName19 = 1 AN"& _ 
                "D `measurementResultName19` IS NULL) OR (`measurementResultName19` = @Original_m"& _ 
                "easurementResultName19)) AND ((@IsNull_measurementResultMeasure19 = 1 AND `measu"& _ 
                "rementResultMeasure19` IS NULL) OR (`measurementResultMeasure19` = @Original_mea"& _ 
                "surementResultMeasure19)) AND ((@IsNull_measurementResultName20 = 1 AND `measure"& _ 
                "mentResultName20` IS NULL) OR (`measurementResultName20` = @Original_measurement"& _ 
                "ResultName20)) AND ((@IsNull_measurementResultMeasure20 = 1 AND `measurementResu"& _ 
                "ltMeasure20` IS NULL) OR (`measurementResultMeasure20` = @Original_measurementRe"& _ 
                "sultMeasure20)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultId"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultId"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultProduct"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultProduct"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultWorkOrder"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultWorkOrder"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultDate"
            param.DbType = Global.System.Data.DbType.DateTime
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "measurementResultDate"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultProductDefect"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "measurementResultProductDefect"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultName1"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName1"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultMeasure1"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure1"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultName2"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName2"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultMeasure2"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure2"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultName3"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName3"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultMeasure3"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure3"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultName4"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName4"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultMeasure4"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure4"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultName5"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName5"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultMeasure5"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure5"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultName6"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName6"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultMeasure6"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure6"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultName7"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName7"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultMeasure7"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure7"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultName8"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName8"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultMeasure8"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure8"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultName9"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName9"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultMeasure9"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure9"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultName10"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName10"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultMeasure10"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure10"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultName11"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName11"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultMeasure11"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure11"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultName12"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName12"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultMeasure12"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure12"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultName13"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName13"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultMeasure13"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure13"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultName14"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName14"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultMeasure14"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure14"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultName15"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName15"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultMeasure15"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure15"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultName16"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName16"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultMeasure16"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure16"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultName17"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName17"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultMeasure17"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure17"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultName18"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName18"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultMeasure18"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure18"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultName19"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName19"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultMeasure19"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure19"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultName20"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName20"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@measurementResultMeasure20"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure20"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultId"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultId"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultProduct"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultProduct"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultProduct"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultProduct"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultWorkOrder"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultWorkOrder"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultWorkOrder"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultWorkOrder"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultDate"
            param.DbType = Global.System.Data.DbType.DateTime
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "measurementResultDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultProductDefect"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultProductDefect"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultProductDefect"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "measurementResultProductDefect"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultName1"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultMeasure1"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultName2"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultName2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultName2"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultMeasure2"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultMeasure2"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultName3"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultName3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultName3"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultMeasure3"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultMeasure3"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure3"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultName4"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultName4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultName4"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultMeasure4"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultMeasure4"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure4"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultName5"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultName5"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultName5"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName5"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultMeasure5"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure5"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultMeasure5"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure5"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultName6"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultName6"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultName6"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName6"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultMeasure6"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure6"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultMeasure6"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure6"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultName7"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultName7"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultName7"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName7"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultMeasure7"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure7"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultMeasure7"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure7"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultName8"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultName8"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultName8"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName8"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultMeasure8"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure8"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultMeasure8"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure8"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultName9"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultName9"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultName9"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName9"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultMeasure9"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure9"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultMeasure9"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure9"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultName10"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultName10"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultName10"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName10"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultMeasure10"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure10"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultMeasure10"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure10"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultName11"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultName11"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultName11"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName11"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultMeasure11"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure11"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultMeasure11"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure11"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultName12"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultName12"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultName12"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName12"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultMeasure12"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure12"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultMeasure12"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure12"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultName13"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultName13"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultName13"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName13"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultMeasure13"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure13"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultMeasure13"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure13"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultName14"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultName14"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultName14"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName14"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultMeasure14"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure14"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultMeasure14"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure14"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultName15"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultName15"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultName15"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName15"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultMeasure15"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure15"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultMeasure15"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure15"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultName16"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultName16"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultName16"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName16"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultMeasure16"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure16"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultMeasure16"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure16"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultName17"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultName17"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultName17"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName17"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultMeasure17"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure17"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultMeasure17"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure17"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultName18"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultName18"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultName18"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName18"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultMeasure18"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure18"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultMeasure18"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure18"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultName19"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultName19"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultName19"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName19"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultMeasure19"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure19"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultMeasure19"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure19"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultName20"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultName20"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultName20"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "measurementResultName20"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_measurementResultMeasure20"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure20"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_measurementResultMeasure20"
            param.DbType = Global.System.Data.DbType.[Single]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
            param.IsNullable = true
            param.SourceColumn = "measurementResultMeasure20"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection()
            Me._connection.ConnectionString = Global.XS156LinearTesterPole.My.MySettings.Default.XS156dataacquisitionConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT `measurementResultId`, `measurementResultProduct`, `measurementResultWorkO"& _ 
                "rder`, `measurementResultDate`, `measurementResultProductDefect`, `measurementRe"& _ 
                "sultName1`, `measurementResultMeasure1`, `measurementResultName2`, `measurementR"& _ 
                "esultMeasure2`, `measurementResultName3`, `measurementResultMeasure3`, `measurem"& _ 
                "entResultName4`, `measurementResultMeasure4`, `measurementResultName5`, `measure"& _ 
                "mentResultMeasure5`, `measurementResultName6`, `measurementResultMeasure6`, `mea"& _ 
                "surementResultName7`, `measurementResultMeasure7`, `measurementResultName8`, `me"& _ 
                "asurementResultMeasure8`, `measurementResultName9`, `measurementResultMeasure9`,"& _ 
                " `measurementResultName10`, `measurementResultMeasure10`, `measurementResultName"& _ 
                "11`, `measurementResultMeasure11`, `measurementResultName12`, `measurementResult"& _ 
                "Measure12`, `measurementResultName13`, `measurementResultMeasure13`, `measuremen"& _ 
                "tResultName14`, `measurementResultMeasure14`, `measurementResultName15`, `measur"& _ 
                "ementResultMeasure15`, `measurementResultName16`, `measurementResultMeasure16`, "& _ 
                "`measurementResultName17`, `measurementResultMeasure17`, `measurementResultName1"& _ 
                "8`, `measurementResultMeasure18`, `measurementResultName19`, `measurementResultM"& _ 
                "easure19`, `measurementResultName20`, `measurementResultMeasure20` FROM `measure"& _ 
                "mentresults`"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dataacquisitionDataSet.measurementresultsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dataacquisitionDataSet.measurementresultsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dataacquisitionDataSet.measurementresultsDataTable = New dataacquisitionDataSet.measurementresultsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dataacquisitionDataSet.measurementresultsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dataacquisitionDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "measurementresults")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_measurementResultId As String,  _
                    ByVal Original_measurementResultProduct As String,  _
                    ByVal Original_measurementResultWorkOrder As String,  _
                    ByVal Original_measurementResultDate As Date,  _
                    ByVal Original_measurementResultProductDefect As Global.System.Nullable(Of UInteger),  _
                    ByVal Original_measurementResultName1 As String,  _
                    ByVal Original_measurementResultMeasure1 As Single,  _
                    ByVal Original_measurementResultName2 As String,  _
                    ByVal Original_measurementResultMeasure2 As Global.System.Nullable(Of Single),  _
                    ByVal Original_measurementResultName3 As String,  _
                    ByVal Original_measurementResultMeasure3 As Global.System.Nullable(Of Single),  _
                    ByVal Original_measurementResultName4 As String,  _
                    ByVal Original_measurementResultMeasure4 As Global.System.Nullable(Of Single),  _
                    ByVal Original_measurementResultName5 As String,  _
                    ByVal Original_measurementResultMeasure5 As Global.System.Nullable(Of Single),  _
                    ByVal Original_measurementResultName6 As String,  _
                    ByVal Original_measurementResultMeasure6 As Global.System.Nullable(Of Single),  _
                    ByVal Original_measurementResultName7 As String,  _
                    ByVal Original_measurementResultMeasure7 As Global.System.Nullable(Of Single),  _
                    ByVal Original_measurementResultName8 As String,  _
                    ByVal Original_measurementResultMeasure8 As Global.System.Nullable(Of Single),  _
                    ByVal Original_measurementResultName9 As String,  _
                    ByVal Original_measurementResultMeasure9 As Global.System.Nullable(Of Single),  _
                    ByVal Original_measurementResultName10 As String,  _
                    ByVal Original_measurementResultMeasure10 As Global.System.Nullable(Of Single),  _
                    ByVal Original_measurementResultName11 As String,  _
                    ByVal Original_measurementResultMeasure11 As Global.System.Nullable(Of Single),  _
                    ByVal Original_measurementResultName12 As String,  _
                    ByVal Original_measurementResultMeasure12 As Global.System.Nullable(Of Single),  _
                    ByVal Original_measurementResultName13 As String,  _
                    ByVal Original_measurementResultMeasure13 As Global.System.Nullable(Of Single),  _
                    ByVal Original_measurementResultName14 As String,  _
                    ByVal Original_measurementResultMeasure14 As Global.System.Nullable(Of Single),  _
                    ByVal Original_measurementResultName15 As String,  _
                    ByVal Original_measurementResultMeasure15 As Global.System.Nullable(Of Single),  _
                    ByVal Original_measurementResultName16 As String,  _
                    ByVal Original_measurementResultMeasure16 As Global.System.Nullable(Of Single),  _
                    ByVal Original_measurementResultName17 As String,  _
                    ByVal Original_measurementResultMeasure17 As Global.System.Nullable(Of Single),  _
                    ByVal Original_measurementResultName18 As String,  _
                    ByVal Original_measurementResultMeasure18 As Global.System.Nullable(Of Single),  _
                    ByVal Original_measurementResultName19 As String,  _
                    ByVal Original_measurementResultMeasure19 As Global.System.Nullable(Of Single),  _
                    ByVal Original_measurementResultName20 As String,  _
                    ByVal Original_measurementResultMeasure20 As Global.System.Nullable(Of Single)) As Integer
            If (Original_measurementResultId Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_measurementResultId")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_measurementResultId,String)
            End If
            If (Original_measurementResultProduct Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_measurementResultProduct,String)
            End If
            If (Original_measurementResultWorkOrder Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_measurementResultWorkOrder,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_measurementResultDate,Date)
            If (Original_measurementResultProductDefect.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_measurementResultProductDefect.Value,UInteger)
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Original_measurementResultName1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_measurementResultName1")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_measurementResultName1,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_measurementResultMeasure1,Single)
            If (Original_measurementResultName2 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_measurementResultName2,String)
            End If
            If (Original_measurementResultMeasure2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_measurementResultMeasure2.Value,Single)
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Original_measurementResultName3 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_measurementResultName3,String)
            End If
            If (Original_measurementResultMeasure3.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_measurementResultMeasure3.Value,Single)
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Original_measurementResultName4 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_measurementResultName4,String)
            End If
            If (Original_measurementResultMeasure4.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_measurementResultMeasure4.Value,Single)
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (Original_measurementResultName5 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_measurementResultName5,String)
            End If
            If (Original_measurementResultMeasure5.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_measurementResultMeasure5.Value,Single)
            Else
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (Original_measurementResultName6 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_measurementResultName6,String)
            End If
            If (Original_measurementResultMeasure6.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(Original_measurementResultMeasure6.Value,Single)
            Else
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (Original_measurementResultName7 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(Original_measurementResultName7,String)
            End If
            If (Original_measurementResultMeasure7.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(Original_measurementResultMeasure7.Value,Single)
            Else
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (Original_measurementResultName8 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(Original_measurementResultName8,String)
            End If
            If (Original_measurementResultMeasure8.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(Original_measurementResultMeasure8.Value,Single)
            Else
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (Original_measurementResultName9 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(39).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(Original_measurementResultName9,String)
            End If
            If (Original_measurementResultMeasure9.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(Original_measurementResultMeasure9.Value,Single)
            Else
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (Original_measurementResultName10 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(43).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(Original_measurementResultName10,String)
            End If
            If (Original_measurementResultMeasure10.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(Original_measurementResultMeasure10.Value,Single)
            Else
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(45).Value = Global.System.DBNull.Value
            End If
            If (Original_measurementResultName11 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(46).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(47).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(46).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(Original_measurementResultName11,String)
            End If
            If (Original_measurementResultMeasure11.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(48).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(Original_measurementResultMeasure11.Value,Single)
            Else
                Me.Adapter.DeleteCommand.Parameters(48).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            If (Original_measurementResultName12 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(50).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(51).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(50).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(51).Value = CType(Original_measurementResultName12,String)
            End If
            If (Original_measurementResultMeasure12.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(52).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(53).Value = CType(Original_measurementResultMeasure12.Value,Single)
            Else
                Me.Adapter.DeleteCommand.Parameters(52).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(53).Value = Global.System.DBNull.Value
            End If
            If (Original_measurementResultName13 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(54).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(55).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(54).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(55).Value = CType(Original_measurementResultName13,String)
            End If
            If (Original_measurementResultMeasure13.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(56).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(57).Value = CType(Original_measurementResultMeasure13.Value,Single)
            Else
                Me.Adapter.DeleteCommand.Parameters(56).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(57).Value = Global.System.DBNull.Value
            End If
            If (Original_measurementResultName14 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(58).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(59).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(58).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(59).Value = CType(Original_measurementResultName14,String)
            End If
            If (Original_measurementResultMeasure14.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(60).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(61).Value = CType(Original_measurementResultMeasure14.Value,Single)
            Else
                Me.Adapter.DeleteCommand.Parameters(60).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(61).Value = Global.System.DBNull.Value
            End If
            If (Original_measurementResultName15 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(62).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(63).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(62).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(63).Value = CType(Original_measurementResultName15,String)
            End If
            If (Original_measurementResultMeasure15.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(64).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(65).Value = CType(Original_measurementResultMeasure15.Value,Single)
            Else
                Me.Adapter.DeleteCommand.Parameters(64).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(65).Value = Global.System.DBNull.Value
            End If
            If (Original_measurementResultName16 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(66).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(67).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(66).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(67).Value = CType(Original_measurementResultName16,String)
            End If
            If (Original_measurementResultMeasure16.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(68).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(69).Value = CType(Original_measurementResultMeasure16.Value,Single)
            Else
                Me.Adapter.DeleteCommand.Parameters(68).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(69).Value = Global.System.DBNull.Value
            End If
            If (Original_measurementResultName17 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(70).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(71).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(70).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(71).Value = CType(Original_measurementResultName17,String)
            End If
            If (Original_measurementResultMeasure17.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(72).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(73).Value = CType(Original_measurementResultMeasure17.Value,Single)
            Else
                Me.Adapter.DeleteCommand.Parameters(72).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(73).Value = Global.System.DBNull.Value
            End If
            If (Original_measurementResultName18 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(74).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(75).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(74).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(75).Value = CType(Original_measurementResultName18,String)
            End If
            If (Original_measurementResultMeasure18.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(76).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(77).Value = CType(Original_measurementResultMeasure18.Value,Single)
            Else
                Me.Adapter.DeleteCommand.Parameters(76).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(77).Value = Global.System.DBNull.Value
            End If
            If (Original_measurementResultName19 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(78).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(79).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(78).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(79).Value = CType(Original_measurementResultName19,String)
            End If
            If (Original_measurementResultMeasure19.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(80).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(81).Value = CType(Original_measurementResultMeasure19.Value,Single)
            Else
                Me.Adapter.DeleteCommand.Parameters(80).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(81).Value = Global.System.DBNull.Value
            End If
            If (Original_measurementResultName20 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(82).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(83).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(82).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(83).Value = CType(Original_measurementResultName20,String)
            End If
            If (Original_measurementResultMeasure20.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(84).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(85).Value = CType(Original_measurementResultMeasure20.Value,Single)
            Else
                Me.Adapter.DeleteCommand.Parameters(84).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(85).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal measurementResultId As String,  _
                    ByVal measurementResultProduct As String,  _
                    ByVal measurementResultWorkOrder As String,  _
                    ByVal measurementResultDate As Date,  _
                    ByVal measurementResultProductDefect As Global.System.Nullable(Of UInteger),  _
                    ByVal measurementResultName1 As String,  _
                    ByVal measurementResultMeasure1 As Single,  _
                    ByVal measurementResultName2 As String,  _
                    ByVal measurementResultMeasure2 As Global.System.Nullable(Of Single),  _
                    ByVal measurementResultName3 As String,  _
                    ByVal measurementResultMeasure3 As Global.System.Nullable(Of Single),  _
                    ByVal measurementResultName4 As String,  _
                    ByVal measurementResultMeasure4 As Global.System.Nullable(Of Single),  _
                    ByVal measurementResultName5 As String,  _
                    ByVal measurementResultMeasure5 As Global.System.Nullable(Of Single),  _
                    ByVal measurementResultName6 As String,  _
                    ByVal measurementResultMeasure6 As Global.System.Nullable(Of Single),  _
                    ByVal measurementResultName7 As String,  _
                    ByVal measurementResultMeasure7 As Global.System.Nullable(Of Single),  _
                    ByVal measurementResultName8 As String,  _
                    ByVal measurementResultMeasure8 As Global.System.Nullable(Of Single),  _
                    ByVal measurementResultName9 As String,  _
                    ByVal measurementResultMeasure9 As Global.System.Nullable(Of Single),  _
                    ByVal measurementResultName10 As String,  _
                    ByVal measurementResultMeasure10 As Global.System.Nullable(Of Single),  _
                    ByVal measurementResultName11 As String,  _
                    ByVal measurementResultMeasure11 As Global.System.Nullable(Of Single),  _
                    ByVal measurementResultName12 As String,  _
                    ByVal measurementResultMeasure12 As Global.System.Nullable(Of Single),  _
                    ByVal measurementResultName13 As String,  _
                    ByVal measurementResultMeasure13 As Global.System.Nullable(Of Single),  _
                    ByVal measurementResultName14 As String,  _
                    ByVal measurementResultMeasure14 As Global.System.Nullable(Of Single),  _
                    ByVal measurementResultName15 As String,  _
                    ByVal measurementResultMeasure15 As Global.System.Nullable(Of Single),  _
                    ByVal measurementResultName16 As String,  _
                    ByVal measurementResultMeasure16 As Global.System.Nullable(Of Single),  _
                    ByVal measurementResultName17 As String,  _
                    ByVal measurementResultMeasure17 As Global.System.Nullable(Of Single),  _
                    ByVal measurementResultName18 As String,  _
                    ByVal measurementResultMeasure18 As Global.System.Nullable(Of Single),  _
                    ByVal measurementResultName19 As String,  _
                    ByVal measurementResultMeasure19 As Global.System.Nullable(Of Single),  _
                    ByVal measurementResultName20 As String,  _
                    ByVal measurementResultMeasure20 As Global.System.Nullable(Of Single)) As Integer
            If (measurementResultId Is Nothing) Then
                Throw New Global.System.ArgumentNullException("measurementResultId")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(measurementResultId,String)
            End If
            If (measurementResultProduct Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(measurementResultProduct,String)
            End If
            If (measurementResultWorkOrder Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(measurementResultWorkOrder,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(measurementResultDate,Date)
            If (measurementResultProductDefect.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(measurementResultProductDefect.Value,UInteger)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (measurementResultName1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("measurementResultName1")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(measurementResultName1,String)
            End If
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(measurementResultMeasure1,Single)
            If (measurementResultName2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(measurementResultName2,String)
            End If
            If (measurementResultMeasure2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(measurementResultMeasure2.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (measurementResultName3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(measurementResultName3,String)
            End If
            If (measurementResultMeasure3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(measurementResultMeasure3.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (measurementResultName4 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(measurementResultName4,String)
            End If
            If (measurementResultMeasure4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(measurementResultMeasure4.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (measurementResultName5 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(measurementResultName5,String)
            End If
            If (measurementResultMeasure5.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(measurementResultMeasure5.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (measurementResultName6 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(measurementResultName6,String)
            End If
            If (measurementResultMeasure6.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(measurementResultMeasure6.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (measurementResultName7 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(measurementResultName7,String)
            End If
            If (measurementResultMeasure7.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(measurementResultMeasure7.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (measurementResultName8 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(measurementResultName8,String)
            End If
            If (measurementResultMeasure8.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(measurementResultMeasure8.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (measurementResultName9 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(measurementResultName9,String)
            End If
            If (measurementResultMeasure9.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(measurementResultMeasure9.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (measurementResultName10 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(measurementResultName10,String)
            End If
            If (measurementResultMeasure10.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(measurementResultMeasure10.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (measurementResultName11 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(measurementResultName11,String)
            End If
            If (measurementResultMeasure11.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(measurementResultMeasure11.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (measurementResultName12 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(measurementResultName12,String)
            End If
            If (measurementResultMeasure12.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(measurementResultMeasure12.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (measurementResultName13 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(measurementResultName13,String)
            End If
            If (measurementResultMeasure13.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(measurementResultMeasure13.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (measurementResultName14 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(measurementResultName14,String)
            End If
            If (measurementResultMeasure14.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(measurementResultMeasure14.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (measurementResultName15 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(measurementResultName15,String)
            End If
            If (measurementResultMeasure15.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(measurementResultMeasure15.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (measurementResultName16 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(measurementResultName16,String)
            End If
            If (measurementResultMeasure16.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(measurementResultMeasure16.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (measurementResultName17 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(measurementResultName17,String)
            End If
            If (measurementResultMeasure17.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(38).Value = CType(measurementResultMeasure17.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (measurementResultName18 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(39).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(39).Value = CType(measurementResultName18,String)
            End If
            If (measurementResultMeasure18.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(40).Value = CType(measurementResultMeasure18.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (measurementResultName19 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(41).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(41).Value = CType(measurementResultName19,String)
            End If
            If (measurementResultMeasure19.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(42).Value = CType(measurementResultMeasure19.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (measurementResultName20 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(43).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(43).Value = CType(measurementResultName20,String)
            End If
            If (measurementResultMeasure20.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(44).Value = CType(measurementResultMeasure20.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal measurementResultId As String,  _
                    ByVal measurementResultProduct As String,  _
                    ByVal measurementResultWorkOrder As String,  _
                    ByVal measurementResultDate As Date,  _
                    ByVal measurementResultProductDefect As Global.System.Nullable(Of UInteger),  _
                    ByVal measurementResultName1 As String,  _
                    ByVal measurementResultMeasure1 As Single,  _
                    ByVal measurementResultName2 As String,  _
                    ByVal measurementResultMeasure2 As Global.System.Nullable(Of Single),  _
                    ByVal measurementResultName3 As String,  _
                    ByVal measurementResultMeasure3 As Global.System.Nullable(Of Single),  _
                    ByVal measurementResultName4 As String,  _
                    ByVal measurementResultMeasure4 As Global.System.Nullable(Of Single),  _
                    ByVal measurementResultName5 As String,  _
                    ByVal measurementResultMeasure5 As Global.System.Nullable(Of Single),  _
                    ByVal measurementResultName6 As String,  _
                    ByVal measurementResultMeasure6 As Global.System.Nullable(Of Single),  _
                    ByVal measurementResultName7 As String,  _
                    ByVal measurementResultMeasure7 As Global.System.Nullable(Of Single),  _
                    ByVal measurementResultName8 As String,  _
                    ByVal measurementResultMeasure8 As Global.System.Nullable(Of Single),  _
                    ByVal measurementResultName9 As String,  _
                    ByVal measurementResultMeasure9 As Global.System.Nullable(Of Single),  _
                    ByVal measurementResultName10 As String,  _
                    ByVal measurementResultMeasure10 As Global.System.Nullable(Of Single),  _
                    ByVal measurementResultName11 As String,  _
                    ByVal measurementResultMeasure11 As Global.System.Nullable(Of Single),  _
                    ByVal measurementResultName12 As String,  _
                    ByVal measurementResultMeasure12 As Global.System.Nullable(Of Single),  _
                    ByVal measurementResultName13 As String,  _
                    ByVal measurementResultMeasure13 As Global.System.Nullable(Of Single),  _
                    ByVal measurementResultName14 As String,  _
                    ByVal measurementResultMeasure14 As Global.System.Nullable(Of Single),  _
                    ByVal measurementResultName15 As String,  _
                    ByVal measurementResultMeasure15 As Global.System.Nullable(Of Single),  _
                    ByVal measurementResultName16 As String,  _
                    ByVal measurementResultMeasure16 As Global.System.Nullable(Of Single),  _
                    ByVal measurementResultName17 As String,  _
                    ByVal measurementResultMeasure17 As Global.System.Nullable(Of Single),  _
                    ByVal measurementResultName18 As String,  _
                    ByVal measurementResultMeasure18 As Global.System.Nullable(Of Single),  _
                    ByVal measurementResultName19 As String,  _
                    ByVal measurementResultMeasure19 As Global.System.Nullable(Of Single),  _
                    ByVal measurementResultName20 As String,  _
                    ByVal measurementResultMeasure20 As Global.System.Nullable(Of Single),  _
                    ByVal Original_measurementResultId As String,  _
                    ByVal Original_measurementResultProduct As String,  _
                    ByVal Original_measurementResultWorkOrder As String,  _
                    ByVal Original_measurementResultDate As Date,  _
                    ByVal Original_measurementResultProductDefect As Global.System.Nullable(Of UInteger),  _
                    ByVal Original_measurementResultName1 As String,  _
                    ByVal Original_measurementResultMeasure1 As Single,  _
                    ByVal Original_measurementResultName2 As String,  _
                    ByVal Original_measurementResultMeasure2 As Global.System.Nullable(Of Single),  _
                    ByVal Original_measurementResultName3 As String,  _
                    ByVal Original_measurementResultMeasure3 As Global.System.Nullable(Of Single),  _
                    ByVal Original_measurementResultName4 As String,  _
                    ByVal Original_measurementResultMeasure4 As Global.System.Nullable(Of Single),  _
                    ByVal Original_measurementResultName5 As String,  _
                    ByVal Original_measurementResultMeasure5 As Global.System.Nullable(Of Single),  _
                    ByVal Original_measurementResultName6 As String,  _
                    ByVal Original_measurementResultMeasure6 As Global.System.Nullable(Of Single),  _
                    ByVal Original_measurementResultName7 As String,  _
                    ByVal Original_measurementResultMeasure7 As Global.System.Nullable(Of Single),  _
                    ByVal Original_measurementResultName8 As String,  _
                    ByVal Original_measurementResultMeasure8 As Global.System.Nullable(Of Single),  _
                    ByVal Original_measurementResultName9 As String,  _
                    ByVal Original_measurementResultMeasure9 As Global.System.Nullable(Of Single),  _
                    ByVal Original_measurementResultName10 As String,  _
                    ByVal Original_measurementResultMeasure10 As Global.System.Nullable(Of Single),  _
                    ByVal Original_measurementResultName11 As String,  _
                    ByVal Original_measurementResultMeasure11 As Global.System.Nullable(Of Single),  _
                    ByVal Original_measurementResultName12 As String,  _
                    ByVal Original_measurementResultMeasure12 As Global.System.Nullable(Of Single),  _
                    ByVal Original_measurementResultName13 As String,  _
                    ByVal Original_measurementResultMeasure13 As Global.System.Nullable(Of Single),  _
                    ByVal Original_measurementResultName14 As String,  _
                    ByVal Original_measurementResultMeasure14 As Global.System.Nullable(Of Single),  _
                    ByVal Original_measurementResultName15 As String,  _
                    ByVal Original_measurementResultMeasure15 As Global.System.Nullable(Of Single),  _
                    ByVal Original_measurementResultName16 As String,  _
                    ByVal Original_measurementResultMeasure16 As Global.System.Nullable(Of Single),  _
                    ByVal Original_measurementResultName17 As String,  _
                    ByVal Original_measurementResultMeasure17 As Global.System.Nullable(Of Single),  _
                    ByVal Original_measurementResultName18 As String,  _
                    ByVal Original_measurementResultMeasure18 As Global.System.Nullable(Of Single),  _
                    ByVal Original_measurementResultName19 As String,  _
                    ByVal Original_measurementResultMeasure19 As Global.System.Nullable(Of Single),  _
                    ByVal Original_measurementResultName20 As String,  _
                    ByVal Original_measurementResultMeasure20 As Global.System.Nullable(Of Single)) As Integer
            If (measurementResultId Is Nothing) Then
                Throw New Global.System.ArgumentNullException("measurementResultId")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(measurementResultId,String)
            End If
            If (measurementResultProduct Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(measurementResultProduct,String)
            End If
            If (measurementResultWorkOrder Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(measurementResultWorkOrder,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(measurementResultDate,Date)
            If (measurementResultProductDefect.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(measurementResultProductDefect.Value,UInteger)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (measurementResultName1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("measurementResultName1")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(measurementResultName1,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(measurementResultMeasure1,Single)
            If (measurementResultName2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(measurementResultName2,String)
            End If
            If (measurementResultMeasure2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(measurementResultMeasure2.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (measurementResultName3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(measurementResultName3,String)
            End If
            If (measurementResultMeasure3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(measurementResultMeasure3.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (measurementResultName4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(measurementResultName4,String)
            End If
            If (measurementResultMeasure4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(measurementResultMeasure4.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (measurementResultName5 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(measurementResultName5,String)
            End If
            If (measurementResultMeasure5.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(measurementResultMeasure5.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (measurementResultName6 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(measurementResultName6,String)
            End If
            If (measurementResultMeasure6.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(measurementResultMeasure6.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (measurementResultName7 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(measurementResultName7,String)
            End If
            If (measurementResultMeasure7.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(measurementResultMeasure7.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (measurementResultName8 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(measurementResultName8,String)
            End If
            If (measurementResultMeasure8.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(measurementResultMeasure8.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (measurementResultName9 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(measurementResultName9,String)
            End If
            If (measurementResultMeasure9.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(measurementResultMeasure9.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (measurementResultName10 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(measurementResultName10,String)
            End If
            If (measurementResultMeasure10.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(measurementResultMeasure10.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (measurementResultName11 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(measurementResultName11,String)
            End If
            If (measurementResultMeasure11.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(measurementResultMeasure11.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (measurementResultName12 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(measurementResultName12,String)
            End If
            If (measurementResultMeasure12.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(measurementResultMeasure12.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (measurementResultName13 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(measurementResultName13,String)
            End If
            If (measurementResultMeasure13.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(measurementResultMeasure13.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (measurementResultName14 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(measurementResultName14,String)
            End If
            If (measurementResultMeasure14.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(measurementResultMeasure14.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (measurementResultName15 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(measurementResultName15,String)
            End If
            If (measurementResultMeasure15.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(measurementResultMeasure15.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (measurementResultName16 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(measurementResultName16,String)
            End If
            If (measurementResultMeasure16.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(measurementResultMeasure16.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (measurementResultName17 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(measurementResultName17,String)
            End If
            If (measurementResultMeasure17.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(measurementResultMeasure17.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (measurementResultName18 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(measurementResultName18,String)
            End If
            If (measurementResultMeasure18.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(measurementResultMeasure18.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (measurementResultName19 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(measurementResultName19,String)
            End If
            If (measurementResultMeasure19.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(measurementResultMeasure19.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (measurementResultName20 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(measurementResultName20,String)
            End If
            If (measurementResultMeasure20.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(measurementResultMeasure20.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (Original_measurementResultId Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_measurementResultId")
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_measurementResultId,String)
            End If
            If (Original_measurementResultProduct Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_measurementResultProduct,String)
            End If
            If (Original_measurementResultWorkOrder Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_measurementResultWorkOrder,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(50).Value = CType(Original_measurementResultDate,Date)
            If (Original_measurementResultProductDefect.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(Original_measurementResultProductDefect.Value,UInteger)
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(52).Value = Global.System.DBNull.Value
            End If
            If (Original_measurementResultName1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_measurementResultName1")
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_measurementResultName1,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(54).Value = CType(Original_measurementResultMeasure1,Single)
            If (Original_measurementResultName2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(56).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(Original_measurementResultName2,String)
            End If
            If (Original_measurementResultMeasure2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(Original_measurementResultMeasure2.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(58).Value = Global.System.DBNull.Value
            End If
            If (Original_measurementResultName3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(60).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(Original_measurementResultName3,String)
            End If
            If (Original_measurementResultMeasure3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(Original_measurementResultMeasure3.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(62).Value = Global.System.DBNull.Value
            End If
            If (Original_measurementResultName4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(64).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(Original_measurementResultName4,String)
            End If
            If (Original_measurementResultMeasure4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(Original_measurementResultMeasure4.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(66).Value = Global.System.DBNull.Value
            End If
            If (Original_measurementResultName5 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(68).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(Original_measurementResultName5,String)
            End If
            If (Original_measurementResultMeasure5.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(Original_measurementResultMeasure5.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(70).Value = Global.System.DBNull.Value
            End If
            If (Original_measurementResultName6 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(72).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(Original_measurementResultName6,String)
            End If
            If (Original_measurementResultMeasure6.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(Original_measurementResultMeasure6.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(74).Value = Global.System.DBNull.Value
            End If
            If (Original_measurementResultName7 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(76).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(Original_measurementResultName7,String)
            End If
            If (Original_measurementResultMeasure7.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(Original_measurementResultMeasure7.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(78).Value = Global.System.DBNull.Value
            End If
            If (Original_measurementResultName8 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(79).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(80).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(79).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(Original_measurementResultName8,String)
            End If
            If (Original_measurementResultMeasure8.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(81).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(82).Value = CType(Original_measurementResultMeasure8.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(81).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(82).Value = Global.System.DBNull.Value
            End If
            If (Original_measurementResultName9 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(83).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(84).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(83).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(84).Value = CType(Original_measurementResultName9,String)
            End If
            If (Original_measurementResultMeasure9.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(85).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(86).Value = CType(Original_measurementResultMeasure9.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(85).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(86).Value = Global.System.DBNull.Value
            End If
            If (Original_measurementResultName10 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(87).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(88).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(87).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(88).Value = CType(Original_measurementResultName10,String)
            End If
            If (Original_measurementResultMeasure10.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(89).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(90).Value = CType(Original_measurementResultMeasure10.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(89).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(90).Value = Global.System.DBNull.Value
            End If
            If (Original_measurementResultName11 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(91).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(92).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(91).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(92).Value = CType(Original_measurementResultName11,String)
            End If
            If (Original_measurementResultMeasure11.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(93).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(94).Value = CType(Original_measurementResultMeasure11.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(93).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(94).Value = Global.System.DBNull.Value
            End If
            If (Original_measurementResultName12 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(95).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(96).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(95).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(96).Value = CType(Original_measurementResultName12,String)
            End If
            If (Original_measurementResultMeasure12.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(97).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(98).Value = CType(Original_measurementResultMeasure12.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(97).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(98).Value = Global.System.DBNull.Value
            End If
            If (Original_measurementResultName13 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(99).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(100).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(99).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(100).Value = CType(Original_measurementResultName13,String)
            End If
            If (Original_measurementResultMeasure13.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(101).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(102).Value = CType(Original_measurementResultMeasure13.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(101).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(102).Value = Global.System.DBNull.Value
            End If
            If (Original_measurementResultName14 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(103).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(104).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(103).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(104).Value = CType(Original_measurementResultName14,String)
            End If
            If (Original_measurementResultMeasure14.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(105).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(106).Value = CType(Original_measurementResultMeasure14.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(105).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(106).Value = Global.System.DBNull.Value
            End If
            If (Original_measurementResultName15 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(107).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(108).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(107).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(108).Value = CType(Original_measurementResultName15,String)
            End If
            If (Original_measurementResultMeasure15.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(109).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(110).Value = CType(Original_measurementResultMeasure15.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(109).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(110).Value = Global.System.DBNull.Value
            End If
            If (Original_measurementResultName16 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(111).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(112).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(111).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(112).Value = CType(Original_measurementResultName16,String)
            End If
            If (Original_measurementResultMeasure16.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(113).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(114).Value = CType(Original_measurementResultMeasure16.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(113).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(114).Value = Global.System.DBNull.Value
            End If
            If (Original_measurementResultName17 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(115).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(116).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(115).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(116).Value = CType(Original_measurementResultName17,String)
            End If
            If (Original_measurementResultMeasure17.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(117).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(118).Value = CType(Original_measurementResultMeasure17.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(117).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(118).Value = Global.System.DBNull.Value
            End If
            If (Original_measurementResultName18 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(119).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(120).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(119).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(120).Value = CType(Original_measurementResultName18,String)
            End If
            If (Original_measurementResultMeasure18.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(121).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(122).Value = CType(Original_measurementResultMeasure18.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(121).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(122).Value = Global.System.DBNull.Value
            End If
            If (Original_measurementResultName19 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(123).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(124).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(123).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(124).Value = CType(Original_measurementResultName19,String)
            End If
            If (Original_measurementResultMeasure19.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(125).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(126).Value = CType(Original_measurementResultMeasure19.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(125).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(126).Value = Global.System.DBNull.Value
            End If
            If (Original_measurementResultName20 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(127).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(128).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(127).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(128).Value = CType(Original_measurementResultName20,String)
            End If
            If (Original_measurementResultMeasure20.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(129).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(130).Value = CType(Original_measurementResultMeasure20.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(129).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(130).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal measurementResultProduct As String,  _
                    ByVal measurementResultWorkOrder As String,  _
                    ByVal measurementResultDate As Date,  _
                    ByVal measurementResultProductDefect As Global.System.Nullable(Of UInteger),  _
                    ByVal measurementResultName1 As String,  _
                    ByVal measurementResultMeasure1 As Single,  _
                    ByVal measurementResultName2 As String,  _
                    ByVal measurementResultMeasure2 As Global.System.Nullable(Of Single),  _
                    ByVal measurementResultName3 As String,  _
                    ByVal measurementResultMeasure3 As Global.System.Nullable(Of Single),  _
                    ByVal measurementResultName4 As String,  _
                    ByVal measurementResultMeasure4 As Global.System.Nullable(Of Single),  _
                    ByVal measurementResultName5 As String,  _
                    ByVal measurementResultMeasure5 As Global.System.Nullable(Of Single),  _
                    ByVal measurementResultName6 As String,  _
                    ByVal measurementResultMeasure6 As Global.System.Nullable(Of Single),  _
                    ByVal measurementResultName7 As String,  _
                    ByVal measurementResultMeasure7 As Global.System.Nullable(Of Single),  _
                    ByVal measurementResultName8 As String,  _
                    ByVal measurementResultMeasure8 As Global.System.Nullable(Of Single),  _
                    ByVal measurementResultName9 As String,  _
                    ByVal measurementResultMeasure9 As Global.System.Nullable(Of Single),  _
                    ByVal measurementResultName10 As String,  _
                    ByVal measurementResultMeasure10 As Global.System.Nullable(Of Single),  _
                    ByVal measurementResultName11 As String,  _
                    ByVal measurementResultMeasure11 As Global.System.Nullable(Of Single),  _
                    ByVal measurementResultName12 As String,  _
                    ByVal measurementResultMeasure12 As Global.System.Nullable(Of Single),  _
                    ByVal measurementResultName13 As String,  _
                    ByVal measurementResultMeasure13 As Global.System.Nullable(Of Single),  _
                    ByVal measurementResultName14 As String,  _
                    ByVal measurementResultMeasure14 As Global.System.Nullable(Of Single),  _
                    ByVal measurementResultName15 As String,  _
                    ByVal measurementResultMeasure15 As Global.System.Nullable(Of Single),  _
                    ByVal measurementResultName16 As String,  _
                    ByVal measurementResultMeasure16 As Global.System.Nullable(Of Single),  _
                    ByVal measurementResultName17 As String,  _
                    ByVal measurementResultMeasure17 As Global.System.Nullable(Of Single),  _
                    ByVal measurementResultName18 As String,  _
                    ByVal measurementResultMeasure18 As Global.System.Nullable(Of Single),  _
                    ByVal measurementResultName19 As String,  _
                    ByVal measurementResultMeasure19 As Global.System.Nullable(Of Single),  _
                    ByVal measurementResultName20 As String,  _
                    ByVal measurementResultMeasure20 As Global.System.Nullable(Of Single),  _
                    ByVal Original_measurementResultId As String,  _
                    ByVal Original_measurementResultProduct As String,  _
                    ByVal Original_measurementResultWorkOrder As String,  _
                    ByVal Original_measurementResultDate As Date,  _
                    ByVal Original_measurementResultProductDefect As Global.System.Nullable(Of UInteger),  _
                    ByVal Original_measurementResultName1 As String,  _
                    ByVal Original_measurementResultMeasure1 As Single,  _
                    ByVal Original_measurementResultName2 As String,  _
                    ByVal Original_measurementResultMeasure2 As Global.System.Nullable(Of Single),  _
                    ByVal Original_measurementResultName3 As String,  _
                    ByVal Original_measurementResultMeasure3 As Global.System.Nullable(Of Single),  _
                    ByVal Original_measurementResultName4 As String,  _
                    ByVal Original_measurementResultMeasure4 As Global.System.Nullable(Of Single),  _
                    ByVal Original_measurementResultName5 As String,  _
                    ByVal Original_measurementResultMeasure5 As Global.System.Nullable(Of Single),  _
                    ByVal Original_measurementResultName6 As String,  _
                    ByVal Original_measurementResultMeasure6 As Global.System.Nullable(Of Single),  _
                    ByVal Original_measurementResultName7 As String,  _
                    ByVal Original_measurementResultMeasure7 As Global.System.Nullable(Of Single),  _
                    ByVal Original_measurementResultName8 As String,  _
                    ByVal Original_measurementResultMeasure8 As Global.System.Nullable(Of Single),  _
                    ByVal Original_measurementResultName9 As String,  _
                    ByVal Original_measurementResultMeasure9 As Global.System.Nullable(Of Single),  _
                    ByVal Original_measurementResultName10 As String,  _
                    ByVal Original_measurementResultMeasure10 As Global.System.Nullable(Of Single),  _
                    ByVal Original_measurementResultName11 As String,  _
                    ByVal Original_measurementResultMeasure11 As Global.System.Nullable(Of Single),  _
                    ByVal Original_measurementResultName12 As String,  _
                    ByVal Original_measurementResultMeasure12 As Global.System.Nullable(Of Single),  _
                    ByVal Original_measurementResultName13 As String,  _
                    ByVal Original_measurementResultMeasure13 As Global.System.Nullable(Of Single),  _
                    ByVal Original_measurementResultName14 As String,  _
                    ByVal Original_measurementResultMeasure14 As Global.System.Nullable(Of Single),  _
                    ByVal Original_measurementResultName15 As String,  _
                    ByVal Original_measurementResultMeasure15 As Global.System.Nullable(Of Single),  _
                    ByVal Original_measurementResultName16 As String,  _
                    ByVal Original_measurementResultMeasure16 As Global.System.Nullable(Of Single),  _
                    ByVal Original_measurementResultName17 As String,  _
                    ByVal Original_measurementResultMeasure17 As Global.System.Nullable(Of Single),  _
                    ByVal Original_measurementResultName18 As String,  _
                    ByVal Original_measurementResultMeasure18 As Global.System.Nullable(Of Single),  _
                    ByVal Original_measurementResultName19 As String,  _
                    ByVal Original_measurementResultMeasure19 As Global.System.Nullable(Of Single),  _
                    ByVal Original_measurementResultName20 As String,  _
                    ByVal Original_measurementResultMeasure20 As Global.System.Nullable(Of Single)) As Integer
            Return Me.Update(Original_measurementResultId, measurementResultProduct, measurementResultWorkOrder, measurementResultDate, measurementResultProductDefect, measurementResultName1, measurementResultMeasure1, measurementResultName2, measurementResultMeasure2, measurementResultName3, measurementResultMeasure3, measurementResultName4, measurementResultMeasure4, measurementResultName5, measurementResultMeasure5, measurementResultName6, measurementResultMeasure6, measurementResultName7, measurementResultMeasure7, measurementResultName8, measurementResultMeasure8, measurementResultName9, measurementResultMeasure9, measurementResultName10, measurementResultMeasure10, measurementResultName11, measurementResultMeasure11, measurementResultName12, measurementResultMeasure12, measurementResultName13, measurementResultMeasure13, measurementResultName14, measurementResultMeasure14, measurementResultName15, measurementResultMeasure15, measurementResultName16, measurementResultMeasure16, measurementResultName17, measurementResultMeasure17, measurementResultName18, measurementResultMeasure18, measurementResultName19, measurementResultMeasure19, measurementResultName20, measurementResultMeasure20, Original_measurementResultId, Original_measurementResultProduct, Original_measurementResultWorkOrder, Original_measurementResultDate, Original_measurementResultProductDefect, Original_measurementResultName1, Original_measurementResultMeasure1, Original_measurementResultName2, Original_measurementResultMeasure2, Original_measurementResultName3, Original_measurementResultMeasure3, Original_measurementResultName4, Original_measurementResultMeasure4, Original_measurementResultName5, Original_measurementResultMeasure5, Original_measurementResultName6, Original_measurementResultMeasure6, Original_measurementResultName7, Original_measurementResultMeasure7, Original_measurementResultName8, Original_measurementResultMeasure8, Original_measurementResultName9, Original_measurementResultMeasure9, Original_measurementResultName10, Original_measurementResultMeasure10, Original_measurementResultName11, Original_measurementResultMeasure11, Original_measurementResultName12, Original_measurementResultMeasure12, Original_measurementResultName13, Original_measurementResultMeasure13, Original_measurementResultName14, Original_measurementResultMeasure14, Original_measurementResultName15, Original_measurementResultMeasure15, Original_measurementResultName16, Original_measurementResultMeasure16, Original_measurementResultName17, Original_measurementResultMeasure17, Original_measurementResultName18, Original_measurementResultMeasure18, Original_measurementResultName19, Original_measurementResultMeasure19, Original_measurementResultName20, Original_measurementResultMeasure20)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class productdefectcodesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "productdefectcodes"
            tableMapping.ColumnMappings.Add("productDefectCode", "productDefectCode")
            tableMapping.ColumnMappings.Add("productDefectText", "productDefectText")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `productdefectcodes` WHERE ((`productDefectCode` = @Original_productD"& _ 
                "efectCode) AND ((@IsNull_productDefectText = 1 AND `productDefectText` IS NULL) "& _ 
                "OR (`productDefectText` = @Original_productDefectText)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_productDefectCode"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "productDefectCode"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_productDefectText"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "productDefectText"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_productDefectText"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "productDefectText"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `productdefectcodes` (`productDefectText`) VALUES (@productDefectText"& _ 
                ")"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@productDefectText"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "productDefectText"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `productdefectcodes` SET `productDefectText` = @productDefectText WHERE (("& _ 
                "`productDefectCode` = @Original_productDefectCode) AND ((@IsNull_productDefectTe"& _ 
                "xt = 1 AND `productDefectText` IS NULL) OR (`productDefectText` = @Original_prod"& _ 
                "uctDefectText)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@productDefectText"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "productDefectText"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_productDefectCode"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "productDefectCode"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_productDefectText"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "productDefectText"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_productDefectText"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "productDefectText"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection()
            Me._connection.ConnectionString = Global.XS156LinearTesterPole.My.MySettings.Default.XS156dataacquisitionConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT `productDefectCode`, `productDefectText` FROM `productdefectcodes`"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dataacquisitionDataSet.productdefectcodesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dataacquisitionDataSet.productdefectcodesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dataacquisitionDataSet.productdefectcodesDataTable = New dataacquisitionDataSet.productdefectcodesDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dataacquisitionDataSet.productdefectcodesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dataacquisitionDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "productdefectcodes")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_productDefectCode As UInteger, ByVal Original_productDefectText As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_productDefectCode,UInteger)
            If (Original_productDefectText Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_productDefectText,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal productDefectText As String) As Integer
            If (productDefectText Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(productDefectText,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal productDefectText As String, ByVal Original_productDefectCode As UInteger, ByVal Original_productDefectText As String) As Integer
            If (productDefectText Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(productDefectText,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Original_productDefectCode,UInteger)
            If (Original_productDefectText Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_productDefectText,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class workordersTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "workorders"
            tableMapping.ColumnMappings.Add("workOrderId", "workOrderId")
            tableMapping.ColumnMappings.Add("workOrderManufacturingOrder", "workOrderManufacturingOrder")
            tableMapping.ColumnMappings.Add("workOrderEquipment", "workOrderEquipment")
            tableMapping.ColumnMappings.Add("workOrderPhase", "workOrderPhase")
            tableMapping.ColumnMappings.Add("workOrderDuration", "workOrderDuration")
            tableMapping.ColumnMappings.Add("workOrderBeginDate", "workOrderBeginDate")
            tableMapping.ColumnMappings.Add("workOrderEndDate", "workOrderEndDate")
            tableMapping.ColumnMappings.Add("workOrderProcessedQuantity", "workOrderProcessedQuantity")
            tableMapping.ColumnMappings.Add("workOrderQuantityOk", "workOrderQuantityOk")
            tableMapping.ColumnMappings.Add("workOrderQuantityNok", "workOrderQuantityNok")
            tableMapping.ColumnMappings.Add("workOrderPreviousWorkOrder", "workOrderPreviousWorkOrder")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `workorders` WHERE ((`workOrderId` = @Original_workOrderId) AND (`wor"& _ 
                "kOrderManufacturingOrder` = @Original_workOrderManufacturingOrder) AND (`workOrd"& _ 
                "erEquipment` = @Original_workOrderEquipment) AND ((@IsNull_workOrderPhase = 1 AN"& _ 
                "D `workOrderPhase` IS NULL) OR (`workOrderPhase` = @Original_workOrderPhase)) AN"& _ 
                "D ((@IsNull_workOrderDuration = 1 AND `workOrderDuration` IS NULL) OR (`workOrde"& _ 
                "rDuration` = @Original_workOrderDuration)) AND (`workOrderBeginDate` = @Original"& _ 
                "_workOrderBeginDate) AND (`workOrderEndDate` = @Original_workOrderEndDate) AND ("& _ 
                "(@IsNull_workOrderProcessedQuantity = 1 AND `workOrderProcessedQuantity` IS NULL"& _ 
                ") OR (`workOrderProcessedQuantity` = @Original_workOrderProcessedQuantity)) AND "& _ 
                "((@IsNull_workOrderQuantityOk = 1 AND `workOrderQuantityOk` IS NULL) OR (`workOr"& _ 
                "derQuantityOk` = @Original_workOrderQuantityOk)) AND ((@IsNull_workOrderQuantity"& _ 
                "Nok = 1 AND `workOrderQuantityNok` IS NULL) OR (`workOrderQuantityNok` = @Origin"& _ 
                "al_workOrderQuantityNok)) AND ((@IsNull_workOrderPreviousWorkOrder = 1 AND `work"& _ 
                "OrderPreviousWorkOrder` IS NULL) OR (`workOrderPreviousWorkOrder` = @Original_wo"& _ 
                "rkOrderPreviousWorkOrder)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_workOrderId"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "workOrderId"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_workOrderManufacturingOrder"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "workOrderManufacturingOrder"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_workOrderEquipment"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "workOrderEquipment"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_workOrderPhase"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "workOrderPhase"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_workOrderPhase"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "workOrderPhase"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_workOrderDuration"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "workOrderDuration"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_workOrderDuration"
            param.DbType = Global.System.Data.DbType.UInt64
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt64
            param.IsNullable = true
            param.SourceColumn = "workOrderDuration"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_workOrderBeginDate"
            param.DbType = Global.System.Data.DbType.DateTime
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "workOrderBeginDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_workOrderEndDate"
            param.DbType = Global.System.Data.DbType.DateTime
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "workOrderEndDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_workOrderProcessedQuantity"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "workOrderProcessedQuantity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_workOrderProcessedQuantity"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "workOrderProcessedQuantity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_workOrderQuantityOk"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "workOrderQuantityOk"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_workOrderQuantityOk"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "workOrderQuantityOk"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_workOrderQuantityNok"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "workOrderQuantityNok"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_workOrderQuantityNok"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "workOrderQuantityNok"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_workOrderPreviousWorkOrder"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "workOrderPreviousWorkOrder"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_workOrderPreviousWorkOrder"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "workOrderPreviousWorkOrder"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `workorders` (`workOrderId`, `workOrderManufacturingOrder`, `workOrde"& _ 
                "rEquipment`, `workOrderPhase`, `workOrderDuration`, `workOrderBeginDate`, `workO"& _ 
                "rderEndDate`, `workOrderProcessedQuantity`, `workOrderQuantityOk`, `workOrderQua"& _ 
                "ntityNok`, `workOrderPreviousWorkOrder`) VALUES (@workOrderId, @workOrderManufac"& _ 
                "turingOrder, @workOrderEquipment, @workOrderPhase, @workOrderDuration, @workOrde"& _ 
                "rBeginDate, @workOrderEndDate, @workOrderProcessedQuantity, @workOrderQuantityOk"& _ 
                ", @workOrderQuantityNok, @workOrderPreviousWorkOrder)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@workOrderId"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "workOrderId"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@workOrderManufacturingOrder"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "workOrderManufacturingOrder"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@workOrderEquipment"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "workOrderEquipment"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@workOrderPhase"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "workOrderPhase"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@workOrderDuration"
            param.DbType = Global.System.Data.DbType.UInt64
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt64
            param.IsNullable = true
            param.SourceColumn = "workOrderDuration"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@workOrderBeginDate"
            param.DbType = Global.System.Data.DbType.DateTime
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "workOrderBeginDate"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@workOrderEndDate"
            param.DbType = Global.System.Data.DbType.DateTime
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "workOrderEndDate"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@workOrderProcessedQuantity"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "workOrderProcessedQuantity"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@workOrderQuantityOk"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "workOrderQuantityOk"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@workOrderQuantityNok"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "workOrderQuantityNok"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@workOrderPreviousWorkOrder"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "workOrderPreviousWorkOrder"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `workorders` SET `workOrderId` = @workOrderId, `workOrderManufacturingOrde"& _ 
                "r` = @workOrderManufacturingOrder, `workOrderEquipment` = @workOrderEquipment, `"& _ 
                "workOrderPhase` = @workOrderPhase, `workOrderDuration` = @workOrderDuration, `wo"& _ 
                "rkOrderBeginDate` = @workOrderBeginDate, `workOrderEndDate` = @workOrderEndDate,"& _ 
                " `workOrderProcessedQuantity` = @workOrderProcessedQuantity, `workOrderQuantityO"& _ 
                "k` = @workOrderQuantityOk, `workOrderQuantityNok` = @workOrderQuantityNok, `work"& _ 
                "OrderPreviousWorkOrder` = @workOrderPreviousWorkOrder WHERE ((`workOrderId` = @O"& _ 
                "riginal_workOrderId) AND (`workOrderManufacturingOrder` = @Original_workOrderMan"& _ 
                "ufacturingOrder) AND (`workOrderEquipment` = @Original_workOrderEquipment) AND ("& _ 
                "(@IsNull_workOrderPhase = 1 AND `workOrderPhase` IS NULL) OR (`workOrderPhase` ="& _ 
                " @Original_workOrderPhase)) AND ((@IsNull_workOrderDuration = 1 AND `workOrderDu"& _ 
                "ration` IS NULL) OR (`workOrderDuration` = @Original_workOrderDuration)) AND (`w"& _ 
                "orkOrderBeginDate` = @Original_workOrderBeginDate) AND (`workOrderEndDate` = @Or"& _ 
                "iginal_workOrderEndDate) AND ((@IsNull_workOrderProcessedQuantity = 1 AND `workO"& _ 
                "rderProcessedQuantity` IS NULL) OR (`workOrderProcessedQuantity` = @Original_wor"& _ 
                "kOrderProcessedQuantity)) AND ((@IsNull_workOrderQuantityOk = 1 AND `workOrderQu"& _ 
                "antityOk` IS NULL) OR (`workOrderQuantityOk` = @Original_workOrderQuantityOk)) A"& _ 
                "ND ((@IsNull_workOrderQuantityNok = 1 AND `workOrderQuantityNok` IS NULL) OR (`w"& _ 
                "orkOrderQuantityNok` = @Original_workOrderQuantityNok)) AND ((@IsNull_workOrderP"& _ 
                "reviousWorkOrder = 1 AND `workOrderPreviousWorkOrder` IS NULL) OR (`workOrderPre"& _ 
                "viousWorkOrder` = @Original_workOrderPreviousWorkOrder)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@workOrderId"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "workOrderId"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@workOrderManufacturingOrder"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "workOrderManufacturingOrder"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@workOrderEquipment"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "workOrderEquipment"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@workOrderPhase"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "workOrderPhase"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@workOrderDuration"
            param.DbType = Global.System.Data.DbType.UInt64
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt64
            param.IsNullable = true
            param.SourceColumn = "workOrderDuration"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@workOrderBeginDate"
            param.DbType = Global.System.Data.DbType.DateTime
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "workOrderBeginDate"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@workOrderEndDate"
            param.DbType = Global.System.Data.DbType.DateTime
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "workOrderEndDate"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@workOrderProcessedQuantity"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "workOrderProcessedQuantity"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@workOrderQuantityOk"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "workOrderQuantityOk"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@workOrderQuantityNok"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "workOrderQuantityNok"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@workOrderPreviousWorkOrder"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "workOrderPreviousWorkOrder"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_workOrderId"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "workOrderId"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_workOrderManufacturingOrder"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "workOrderManufacturingOrder"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_workOrderEquipment"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "workOrderEquipment"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_workOrderPhase"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "workOrderPhase"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_workOrderPhase"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "workOrderPhase"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_workOrderDuration"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "workOrderDuration"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_workOrderDuration"
            param.DbType = Global.System.Data.DbType.UInt64
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt64
            param.IsNullable = true
            param.SourceColumn = "workOrderDuration"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_workOrderBeginDate"
            param.DbType = Global.System.Data.DbType.DateTime
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "workOrderBeginDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_workOrderEndDate"
            param.DbType = Global.System.Data.DbType.DateTime
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "workOrderEndDate"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_workOrderProcessedQuantity"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "workOrderProcessedQuantity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_workOrderProcessedQuantity"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "workOrderProcessedQuantity"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_workOrderQuantityOk"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "workOrderQuantityOk"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_workOrderQuantityOk"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "workOrderQuantityOk"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_workOrderQuantityNok"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "workOrderQuantityNok"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_workOrderQuantityNok"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "workOrderQuantityNok"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@IsNull_workOrderPreviousWorkOrder"
            param.DbType = Global.System.Data.DbType.Int32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
            param.IsNullable = true
            param.SourceColumn = "workOrderPreviousWorkOrder"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_workOrderPreviousWorkOrder"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "workOrderPreviousWorkOrder"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection()
            Me._connection.ConnectionString = Global.XS156LinearTesterPole.My.MySettings.Default.XS156dataacquisitionConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT `workOrderId`, `workOrderManufacturingOrder`, `workOrderEquipment`, `workO"& _ 
                "rderPhase`, `workOrderDuration`, `workOrderBeginDate`, `workOrderEndDate`, `work"& _ 
                "OrderProcessedQuantity`, `workOrderQuantityOk`, `workOrderQuantityNok`, `workOrd"& _ 
                "erPreviousWorkOrder` FROM `workorders`"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dataacquisitionDataSet.workordersDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dataacquisitionDataSet.workordersDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dataacquisitionDataSet.workordersDataTable = New dataacquisitionDataSet.workordersDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dataacquisitionDataSet.workordersDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dataacquisitionDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "workorders")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_workOrderId As String, ByVal Original_workOrderManufacturingOrder As String, ByVal Original_workOrderEquipment As UInteger, ByVal Original_workOrderPhase As Global.System.Nullable(Of UInteger), ByVal Original_workOrderDuration As Global.System.Nullable(Of ULong), ByVal Original_workOrderBeginDate As Date, ByVal Original_workOrderEndDate As Date, ByVal Original_workOrderProcessedQuantity As Global.System.Nullable(Of UInteger), ByVal Original_workOrderQuantityOk As Global.System.Nullable(Of UInteger), ByVal Original_workOrderQuantityNok As Global.System.Nullable(Of UInteger), ByVal Original_workOrderPreviousWorkOrder As Global.System.Nullable(Of UInteger)) As Integer
            If (Original_workOrderId Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_workOrderId")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_workOrderId,String)
            End If
            If (Original_workOrderManufacturingOrder Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_workOrderManufacturingOrder")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_workOrderManufacturingOrder,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_workOrderEquipment,UInteger)
            If (Original_workOrderPhase.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_workOrderPhase.Value,UInteger)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_workOrderDuration.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_workOrderDuration.Value,ULong)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_workOrderBeginDate,Date)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_workOrderEndDate,Date)
            If (Original_workOrderProcessedQuantity.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_workOrderProcessedQuantity.Value,UInteger)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_workOrderQuantityOk.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_workOrderQuantityOk.Value,UInteger)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_workOrderQuantityNok.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_workOrderQuantityNok.Value,UInteger)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_workOrderPreviousWorkOrder.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_workOrderPreviousWorkOrder.Value,UInteger)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal workOrderId As String, ByVal workOrderManufacturingOrder As String, ByVal workOrderEquipment As UInteger, ByVal workOrderPhase As Global.System.Nullable(Of UInteger), ByVal workOrderDuration As Global.System.Nullable(Of ULong), ByVal workOrderBeginDate As Date, ByVal workOrderEndDate As Date, ByVal workOrderProcessedQuantity As Global.System.Nullable(Of UInteger), ByVal workOrderQuantityOk As Global.System.Nullable(Of UInteger), ByVal workOrderQuantityNok As Global.System.Nullable(Of UInteger), ByVal workOrderPreviousWorkOrder As Global.System.Nullable(Of UInteger)) As Integer
            If (workOrderId Is Nothing) Then
                Throw New Global.System.ArgumentNullException("workOrderId")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(workOrderId,String)
            End If
            If (workOrderManufacturingOrder Is Nothing) Then
                Throw New Global.System.ArgumentNullException("workOrderManufacturingOrder")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(workOrderManufacturingOrder,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(workOrderEquipment,UInteger)
            If (workOrderPhase.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(workOrderPhase.Value,UInteger)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (workOrderDuration.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(workOrderDuration.Value,ULong)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(workOrderBeginDate,Date)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(workOrderEndDate,Date)
            If (workOrderProcessedQuantity.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(workOrderProcessedQuantity.Value,UInteger)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (workOrderQuantityOk.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(workOrderQuantityOk.Value,UInteger)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (workOrderQuantityNok.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(workOrderQuantityNok.Value,UInteger)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (workOrderPreviousWorkOrder.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(workOrderPreviousWorkOrder.Value,UInteger)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal workOrderId As String,  _
                    ByVal workOrderManufacturingOrder As String,  _
                    ByVal workOrderEquipment As UInteger,  _
                    ByVal workOrderPhase As Global.System.Nullable(Of UInteger),  _
                    ByVal workOrderDuration As Global.System.Nullable(Of ULong),  _
                    ByVal workOrderBeginDate As Date,  _
                    ByVal workOrderEndDate As Date,  _
                    ByVal workOrderProcessedQuantity As Global.System.Nullable(Of UInteger),  _
                    ByVal workOrderQuantityOk As Global.System.Nullable(Of UInteger),  _
                    ByVal workOrderQuantityNok As Global.System.Nullable(Of UInteger),  _
                    ByVal workOrderPreviousWorkOrder As Global.System.Nullable(Of UInteger),  _
                    ByVal Original_workOrderId As String,  _
                    ByVal Original_workOrderManufacturingOrder As String,  _
                    ByVal Original_workOrderEquipment As UInteger,  _
                    ByVal Original_workOrderPhase As Global.System.Nullable(Of UInteger),  _
                    ByVal Original_workOrderDuration As Global.System.Nullable(Of ULong),  _
                    ByVal Original_workOrderBeginDate As Date,  _
                    ByVal Original_workOrderEndDate As Date,  _
                    ByVal Original_workOrderProcessedQuantity As Global.System.Nullable(Of UInteger),  _
                    ByVal Original_workOrderQuantityOk As Global.System.Nullable(Of UInteger),  _
                    ByVal Original_workOrderQuantityNok As Global.System.Nullable(Of UInteger),  _
                    ByVal Original_workOrderPreviousWorkOrder As Global.System.Nullable(Of UInteger)) As Integer
            If (workOrderId Is Nothing) Then
                Throw New Global.System.ArgumentNullException("workOrderId")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(workOrderId,String)
            End If
            If (workOrderManufacturingOrder Is Nothing) Then
                Throw New Global.System.ArgumentNullException("workOrderManufacturingOrder")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(workOrderManufacturingOrder,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(workOrderEquipment,UInteger)
            If (workOrderPhase.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(workOrderPhase.Value,UInteger)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (workOrderDuration.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(workOrderDuration.Value,ULong)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(workOrderBeginDate,Date)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(workOrderEndDate,Date)
            If (workOrderProcessedQuantity.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(workOrderProcessedQuantity.Value,UInteger)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (workOrderQuantityOk.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(workOrderQuantityOk.Value,UInteger)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (workOrderQuantityNok.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(workOrderQuantityNok.Value,UInteger)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (workOrderPreviousWorkOrder.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(workOrderPreviousWorkOrder.Value,UInteger)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_workOrderId Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_workOrderId")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_workOrderId,String)
            End If
            If (Original_workOrderManufacturingOrder Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_workOrderManufacturingOrder")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_workOrderManufacturingOrder,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_workOrderEquipment,UInteger)
            If (Original_workOrderPhase.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_workOrderPhase.Value,UInteger)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Original_workOrderDuration.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_workOrderDuration.Value,ULong)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_workOrderBeginDate,Date)
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_workOrderEndDate,Date)
            If (Original_workOrderProcessedQuantity.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_workOrderProcessedQuantity.Value,UInteger)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (Original_workOrderQuantityOk.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_workOrderQuantityOk.Value,UInteger)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (Original_workOrderQuantityNok.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_workOrderQuantityNok.Value,UInteger)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (Original_workOrderPreviousWorkOrder.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_workOrderPreviousWorkOrder.Value,UInteger)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal workOrderManufacturingOrder As String,  _
                    ByVal workOrderEquipment As UInteger,  _
                    ByVal workOrderPhase As Global.System.Nullable(Of UInteger),  _
                    ByVal workOrderDuration As Global.System.Nullable(Of ULong),  _
                    ByVal workOrderBeginDate As Date,  _
                    ByVal workOrderEndDate As Date,  _
                    ByVal workOrderProcessedQuantity As Global.System.Nullable(Of UInteger),  _
                    ByVal workOrderQuantityOk As Global.System.Nullable(Of UInteger),  _
                    ByVal workOrderQuantityNok As Global.System.Nullable(Of UInteger),  _
                    ByVal workOrderPreviousWorkOrder As Global.System.Nullable(Of UInteger),  _
                    ByVal Original_workOrderId As String,  _
                    ByVal Original_workOrderManufacturingOrder As String,  _
                    ByVal Original_workOrderEquipment As UInteger,  _
                    ByVal Original_workOrderPhase As Global.System.Nullable(Of UInteger),  _
                    ByVal Original_workOrderDuration As Global.System.Nullable(Of ULong),  _
                    ByVal Original_workOrderBeginDate As Date,  _
                    ByVal Original_workOrderEndDate As Date,  _
                    ByVal Original_workOrderProcessedQuantity As Global.System.Nullable(Of UInteger),  _
                    ByVal Original_workOrderQuantityOk As Global.System.Nullable(Of UInteger),  _
                    ByVal Original_workOrderQuantityNok As Global.System.Nullable(Of UInteger),  _
                    ByVal Original_workOrderPreviousWorkOrder As Global.System.Nullable(Of UInteger)) As Integer
            Return Me.Update(Original_workOrderId, workOrderManufacturingOrder, workOrderEquipment, workOrderPhase, workOrderDuration, workOrderBeginDate, workOrderEndDate, workOrderProcessedQuantity, workOrderQuantityOk, workOrderQuantityNok, workOrderPreviousWorkOrder, Original_workOrderId, Original_workOrderManufacturingOrder, Original_workOrderEquipment, Original_workOrderPhase, Original_workOrderDuration, Original_workOrderBeginDate, Original_workOrderEndDate, Original_workOrderProcessedQuantity, Original_workOrderQuantityOk, Original_workOrderQuantityNok, Original_workOrderPreviousWorkOrder)
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _equipmentsTableAdapter As equipmentsTableAdapter
        
        Private _hazardeventsTableAdapter As hazardeventsTableAdapter
        
        Private _manufacturingordersTableAdapter As manufacturingordersTableAdapter
        
        Private _measurementresultsTableAdapter As measurementresultsTableAdapter
        
        Private _productdefectcodesTableAdapter As productdefectcodesTableAdapter
        
        Private _workordersTableAdapter As workordersTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property equipmentsTableAdapter() As equipmentsTableAdapter
            Get
                Return Me._equipmentsTableAdapter
            End Get
            Set
                Me._equipmentsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property hazardeventsTableAdapter() As hazardeventsTableAdapter
            Get
                Return Me._hazardeventsTableAdapter
            End Get
            Set
                Me._hazardeventsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property manufacturingordersTableAdapter() As manufacturingordersTableAdapter
            Get
                Return Me._manufacturingordersTableAdapter
            End Get
            Set
                Me._manufacturingordersTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property measurementresultsTableAdapter() As measurementresultsTableAdapter
            Get
                Return Me._measurementresultsTableAdapter
            End Get
            Set
                Me._measurementresultsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property productdefectcodesTableAdapter() As productdefectcodesTableAdapter
            Get
                Return Me._productdefectcodesTableAdapter
            End Get
            Set
                Me._productdefectcodesTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property workordersTableAdapter() As workordersTableAdapter
            Get
                Return Me._workordersTableAdapter
            End Get
            Set
                Me._workordersTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._equipmentsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._equipmentsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._equipmentsTableAdapter.Connection
                End If
                If ((Not (Me._hazardeventsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._hazardeventsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._hazardeventsTableAdapter.Connection
                End If
                If ((Not (Me._manufacturingordersTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._manufacturingordersTableAdapter.Connection) Is Nothing)) Then
                    Return Me._manufacturingordersTableAdapter.Connection
                End If
                If ((Not (Me._measurementresultsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._measurementresultsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._measurementresultsTableAdapter.Connection
                End If
                If ((Not (Me._productdefectcodesTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._productdefectcodesTableAdapter.Connection) Is Nothing)) Then
                    Return Me._productdefectcodesTableAdapter.Connection
                End If
                If ((Not (Me._workordersTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._workordersTableAdapter.Connection) Is Nothing)) Then
                    Return Me._workordersTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._equipmentsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._hazardeventsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._manufacturingordersTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._measurementresultsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._productdefectcodesTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._workordersTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As dataacquisitionDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._manufacturingordersTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.manufacturingorders.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._manufacturingordersTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._equipmentsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.equipments.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._equipmentsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._workordersTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.workorders.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._workordersTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._hazardeventsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.hazardevents.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._hazardeventsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._measurementresultsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.measurementresults.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._measurementresultsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._productdefectcodesTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.productdefectcodes.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._productdefectcodesTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As dataacquisitionDataSet, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._manufacturingordersTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.manufacturingorders.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._manufacturingordersTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._equipmentsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.equipments.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._equipmentsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._workordersTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.workorders.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._workordersTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._hazardeventsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.hazardevents.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._hazardeventsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._measurementresultsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.measurementresults.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._measurementresultsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._productdefectcodesTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.productdefectcodes.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._productdefectcodesTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As dataacquisitionDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._productdefectcodesTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.productdefectcodes.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._productdefectcodesTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._measurementresultsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.measurementresults.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._measurementresultsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._hazardeventsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.hazardevents.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._hazardeventsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._workordersTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.workorders.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._workordersTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._equipmentsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.equipments.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._equipmentsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._manufacturingordersTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.manufacturingorders.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._manufacturingordersTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As dataacquisitionDataSet) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._equipmentsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._equipmentsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._hazardeventsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._hazardeventsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._manufacturingordersTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._manufacturingordersTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._measurementresultsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._measurementresultsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._productdefectcodesTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._productdefectcodesTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._workordersTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._workordersTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._equipmentsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._equipmentsTableAdapter, Me._equipmentsTableAdapter.Connection)
                    Me._equipmentsTableAdapter.Connection = CType(workConnection,Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._equipmentsTableAdapter.Transaction = CType(workTransaction,Global.MySql.Data.MySqlClient.MySqlTransaction)
                    If Me._equipmentsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._equipmentsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._equipmentsTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._hazardeventsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._hazardeventsTableAdapter, Me._hazardeventsTableAdapter.Connection)
                    Me._hazardeventsTableAdapter.Connection = CType(workConnection,Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._hazardeventsTableAdapter.Transaction = CType(workTransaction,Global.MySql.Data.MySqlClient.MySqlTransaction)
                    If Me._hazardeventsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._hazardeventsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._hazardeventsTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._manufacturingordersTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._manufacturingordersTableAdapter, Me._manufacturingordersTableAdapter.Connection)
                    Me._manufacturingordersTableAdapter.Connection = CType(workConnection,Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._manufacturingordersTableAdapter.Transaction = CType(workTransaction,Global.MySql.Data.MySqlClient.MySqlTransaction)
                    If Me._manufacturingordersTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._manufacturingordersTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._manufacturingordersTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._measurementresultsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._measurementresultsTableAdapter, Me._measurementresultsTableAdapter.Connection)
                    Me._measurementresultsTableAdapter.Connection = CType(workConnection,Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._measurementresultsTableAdapter.Transaction = CType(workTransaction,Global.MySql.Data.MySqlClient.MySqlTransaction)
                    If Me._measurementresultsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._measurementresultsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._measurementresultsTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._productdefectcodesTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._productdefectcodesTableAdapter, Me._productdefectcodesTableAdapter.Connection)
                    Me._productdefectcodesTableAdapter.Connection = CType(workConnection,Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._productdefectcodesTableAdapter.Transaction = CType(workTransaction,Global.MySql.Data.MySqlClient.MySqlTransaction)
                    If Me._productdefectcodesTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._productdefectcodesTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._productdefectcodesTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._workordersTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._workordersTableAdapter, Me._workordersTableAdapter.Connection)
                    Me._workordersTableAdapter.Connection = CType(workConnection,Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._workordersTableAdapter.Transaction = CType(workTransaction,Global.MySql.Data.MySqlClient.MySqlTransaction)
                    If Me._workordersTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._workordersTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._workordersTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._equipmentsTableAdapter) Is Nothing) Then
                    Me._equipmentsTableAdapter.Connection = CType(revertConnections(Me._equipmentsTableAdapter),Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._equipmentsTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._hazardeventsTableAdapter) Is Nothing) Then
                    Me._hazardeventsTableAdapter.Connection = CType(revertConnections(Me._hazardeventsTableAdapter),Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._hazardeventsTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._manufacturingordersTableAdapter) Is Nothing) Then
                    Me._manufacturingordersTableAdapter.Connection = CType(revertConnections(Me._manufacturingordersTableAdapter),Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._manufacturingordersTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._measurementresultsTableAdapter) Is Nothing) Then
                    Me._measurementresultsTableAdapter.Connection = CType(revertConnections(Me._measurementresultsTableAdapter),Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._measurementresultsTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._productdefectcodesTableAdapter) Is Nothing) Then
                    Me._productdefectcodesTableAdapter.Connection = CType(revertConnections(Me._productdefectcodesTableAdapter),Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._productdefectcodesTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._workordersTableAdapter) Is Nothing) Then
                    Me._workordersTableAdapter.Connection = CType(revertConnections(Me._workordersTableAdapter),Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._workordersTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
